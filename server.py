import asyncio
import os
import traceback
import logging

from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import FileResponse, JSONResponse
from aiogram import types, Bot

from utils import redis, logger as log
from config import ADMIN_ERROR, BOT_TOKEN
from fastapi.templating import Jinja2Templates
from pathlib import Path


BASE_DIR = Path(__file__).resolve().parent
templates = Jinja2Templates(directory=BASE_DIR / "templates")
app = FastAPI()

class BotLogHandler(logging.Handler):
    def emit(self, record):
        msg = self.format(record)
        log.log_message(msg)  # –∏–ª–∏ log.log_error(msg) –¥–ª—è –æ—à–∏–±–æ–∫

# –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ª–æ–≥–æ–≤ FastAPI/Uvicorn
logging.getLogger("uvicorn.access").handlers = [BotLogHandler()]
logging.getLogger("uvicorn.error").handlers = [BotLogHandler()]
logging.getLogger("fastapi").handlers = [BotLogHandler()]

@app.post("/yookassa")
async def yookassa_webhook(request: Request):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç YooKassa.
    –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    bot: Bot = app.state.bot
    r = app.state.redis

    try:
        data = await request.json()
    except Exception as e:
        log.log_message(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}", log_level="error", emoji="‚ö†Ô∏è")
        raise HTTPException(status_code=400, detail="Invalid JSON")

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook: –Ω–∞—á–∏—Å–ª—è–µ–º –¥–Ω–∏ –ø–æ —Ç–∞—Ä–∏—Ñ—É, –∞ –Ω–µ –ø–æ —Å—É–º–º–µ –æ–ø–ª–∞—Ç—ã
    try:
        payment_status = data["object"]["status"]
        user_id_str = data["object"]["metadata"]["user_id"]
        tariff_id_str = data["object"]["metadata"]["tariff_id"]

        user_id = int(user_id_str)
        tariff_id = int(tariff_id_str)
    except (KeyError, ValueError) as e:
        log.log_message(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö webhook: {e}", log_level="error", emoji="‚ùå")
        raise HTTPException(status_code=400, detail="Invalid data")

    if payment_status == "succeeded":
        try:
            tariff = await redis.get_tariff_by_id(tariff_id)
            days = tariff.duration_days
        except Exception as e:
            log.log_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞: {e}", log_level="error", emoji="‚ùå")
            raise HTTPException(status_code=400, detail="Tariff error")

        await redis.add_subscriber_with_duration(user_id, days)
        log.log_message(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–ª—è user_id={user_id} –Ω–∞ {days} –¥–Ω–µ–π", emoji="‚úÖ")

        try:
            await bot.send_message(
                user_id,
                f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∏ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π!"
            )
        except Exception as e:
            log.log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}", log_level="error", emoji="‚ö†Ô∏è")

    return JSONResponse(content={"status": "ok"})


@app.get("/video/{filename}")
async def download_video(request: Request, filename: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP GET –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ downloads.
    """
    filepath = f"downloads/{filename}"
    if not os.path.exists(filepath):
        log.log_message(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}", log_level="error", emoji="‚ùå")
        return templates.TemplateResponse(
            "video_not_found.html",
            {"request": request},
            status_code=404
        )
    log.log_message(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {filepath}", emoji="üì•")
    return FileResponse(
        path=filepath,
        filename=filename,
        media_type="video/mp4",
    )

async def remove_file_later(path: str, delay: int, message: types.Message):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å–ø—É—Å—Ç—è delay —Å–µ–∫—É–Ω–¥.
    –ü—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    log.log_message(
        f"[CLEANUP] –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥: {path}", emoji="‚è≥"
    )
    await asyncio.sleep(delay)
    try:
        os.remove(path)
        log.log_cleanup_video(path)
    except Exception as e:
        error_text = f"–û—à–∏–±–∫–∞: {e}"
        full_trace = traceback.format_exc()
        log.log_error(error_text)
        log.log_error(full_trace)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ–± –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        try:
            await message.bot.send_message(
                ADMIN_ERROR,
                f"‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n<pre>{error_text}</pre>\n<pre>{full_trace}</pre>",
                parse_mode="HTML",
            )
        except Exception as send_err:
            log.log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É: {send_err}")



@app.on_event("startup")
async def on_startup():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Redis –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    log.log_message("–ó–∞–ø—É—Å–∫ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", emoji="üöÄ")
    app.state.bot = Bot(token=BOT_TOKEN)
    app.state.redis = redis
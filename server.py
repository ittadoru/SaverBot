"""Webhook —Å–µ—Ä–≤–µ—Ä FastAPI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""

from __future__ import annotations

import logging
from datetime import datetime, timedelta, timezone
from json import JSONDecodeError
from typing import Any

from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import JSONResponse
from aiogram import Bot

from db.base import get_session  # (13) —É–±—Ä–∞–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç
from db.subscribers import (
    add_subscriber_with_duration,
    is_payment_processed,
    mark_payment_processed,
)
from db.users import mark_user_has_paid
from db.tariff import get_tariff_by_id
from config import BOT_TOKEN, SUPPORT_GROUP_ID, SUBSCRIBE_TOPIC_ID, PRIMARY_ADMIN_ID

logger = logging.getLogger(__name__)  # (12) —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä –≤–º–µ—Å—Ç–æ custom wrapper

app = FastAPI()


# ---------------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Uvicorn ---------------------------
class BotLogHandler(logging.Handler):  # type: ignore[misc]
    """Handler, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π –ª–æ–≥–∏ –≤ Telegram —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ö–∞–Ω–∏–∑–º."""

    def emit(self, record: logging.LogRecord) -> None:  # (2) —Ç–∏–ø–∏–∑–∞—Ü–∏—è
        try:
            from utils import logger as tg_log  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤
            msg = self.format(record)
            tg_log.log_message(msg)
        except Exception:  # noqa: BLE001 - –Ω–µ —Ä–æ–Ω—è–µ–º –∏–∑-–∑–∞ handler
            pass


logging.getLogger("uvicorn.access").handlers = [BotLogHandler()]
logging.getLogger("uvicorn.error").handlers = [BotLogHandler()]
logging.getLogger("fastapi").handlers = [BotLogHandler()]


# Idempotency —Ç–µ–ø–µ—Ä—å –≤ –ë–î (processed_payments)


# ------------------------------- Utilities ----------------------------------
def _calc_expiry(days: int) -> datetime:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (UTC) (8)."""
    return datetime.now(timezone.utc) + timedelta(days=days)


# ------------------------------- Webhook ------------------------------------
@app.post("/yookassa")
async def yookassa_webhook(request: Request) -> JSONResponse:  # (2)
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook YooKassa (–±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è raw JSON) (1,16)."""
    bot: Bot = app.state.bot
    admin_errors: list[str] = []  # (15) –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏

    try:
        data: dict[str, Any] = await request.json()
    except JSONDecodeError as e:  # (6) —É–∑–∫–∏–π except
        logger.error("Invalid JSON: %s", e)
        raise HTTPException(status_code=400, detail="Invalid JSON") from e
    except Exception as e:  # fallback
        logger.exception("JSON parse failure")
        raise HTTPException(status_code=400, detail="Invalid body") from e

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è (6)
    try:
        obj = data["object"]
        payment_status: str = obj["status"]
        metadata = obj["metadata"]
        user_id = int(metadata["user_id"])  # (2)
        tariff_id = int(metadata["tariff_id"])
        payment_id: str = obj.get("id", "")
    except KeyError as e:
        logger.error("Missing key in webhook: %s", e)
        raise HTTPException(status_code=400, detail="Missing key") from e
    except ValueError as e:  # (6) –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ int
        logger.error("Invalid int field: %s", e)
        raise HTTPException(status_code=400, detail="Bad number") from e

    # Idempotency —á–µ—Ä–µ–∑ –ë–î
    if payment_id:
        async with get_session() as session:
            if await is_payment_processed(session, payment_id):
                logger.info("Duplicate webhook ignored payment_id=%s user_id=%s", payment_id, user_id)
                return JSONResponse(content={"status": "ok", "duplicate": True})

    if payment_status == "succeeded":  # —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø—Ä–µ–∂–Ω—é—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
        days = 0
        try:
            async with get_session() as session:
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ idempotency (–≥–æ–Ω–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏)
                if payment_id and await is_payment_processed(session, payment_id):
                    logger.info("Duplicate (race) webhook ignored payment_id=%s user_id=%s", payment_id, user_id)
                    return JSONResponse(content={"status": "ok", "duplicate": True})
                tariff = await get_tariff_by_id(session, tariff_id)
                days = tariff.duration_days  # type: ignore[assignment]
                await add_subscriber_with_duration(session, user_id, days)
                await mark_payment_processed(session, payment_id, user_id)
                await mark_user_has_paid(session, user_id)
                logger.info("Subscription extended user_id=%s days=%s tariff_id=%s", user_id, days, tariff_id)
        except Exception as e:  # (6)
            admin_errors.append(f"Tariff/subscription error: {e}")
            logger.exception("Tariff handling failed user_id=%s tariff_id=%s", user_id, tariff_id)
            raise HTTPException(status_code=400, detail="Tariff error") from e

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä—É–ø–ø—ã
        try:
            user = await bot.get_chat(user_id)
            username = f"@{user.username}" if getattr(user, "username", None) else "‚Äî"
            full_name = getattr(user, "full_name", None) or getattr(user, "first_name", None) or "‚Äî"
            expire_dt = _calc_expiry(days)
            expire_str = expire_dt.strftime('%d.%m.%Y')  # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (8)

            await bot.send_message(
                user_id,
                (
                    f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ <b>{days} –¥–Ω–µ–π</b>!\n\n"
                    f"üè∑Ô∏è –¢–∞—Ä–∏—Ñ: <b>{getattr(tariff, 'name', '‚Äî')}</b>\n"
                    f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ (UTC): <b>{expire_str}</b>"
                ),
                parse_mode="HTML",
            )
            await bot.send_message(
                SUPPORT_GROUP_ID,
                (
                    f"<b>üí≥ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞</b>\n\n"
                    f"üë§ {full_name} ({username})\n"
                    f"üÜî <code>{user_id}</code>\n"
                    f"üè∑Ô∏è {getattr(tariff, 'name', '‚Äî')}\n"
                    f"‚è≥ {days} –¥–Ω.\n"
                    f"üìÖ –î–æ: {expire_str} (UTC)\n"
                ),
                parse_mode="HTML",
                message_thread_id=SUBSCRIBE_TOPIC_ID,
            )
        except Exception as e:  # (6)
            admin_errors.append(f"Notify error: {e}")
            logger.exception("User/group notify failed user_id=%s", user_id)

    # (15) –û–¥–Ω–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—à–∏–±–æ–∫
    if admin_errors:
        try:
            await bot.send_message(PRIMARY_ADMIN_ID, "\n".join(admin_errors))
        except Exception:  # noqa: BLE001
            logger.warning("Failed to send admin aggregated error")

    return JSONResponse(content={"status": "ok"})


# ------------------------------- Startup ------------------------------------
@app.on_event("startup")
async def on_startup() -> None:  # (2)
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
    logger.info("FastAPI startup")
    app.state.bot = Bot(token=BOT_TOKEN)

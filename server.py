
"""Webhook —Å–µ—Ä–≤–µ—Ä FastAPI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""

from __future__ import annotations

import logging
from datetime import datetime, timedelta, timezone
from json import JSONDecodeError
from typing import Any

from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import JSONResponse, FileResponse, HTMLResponse
from aiogram import Bot
import os
import aiofiles
import asyncio

from db.base import get_session  # (13) —É–±—Ä–∞–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç
from db.subscribers import (
    add_subscriber_with_duration,
    is_payment_processed,
    mark_payment_processed,
)
from db.users import mark_user_has_paid
from db.tariff import get_tariff_by_id
from config import BOT_TOKEN, SUPPORT_GROUP_ID, SUBSCRIBE_TOPIC_ID


logger = logging.getLogger(__name__)

app = FastAPI()

# ------------------------------- Video File Serve ------------------------------------
@app.get("/video/{name}.mp4")
async def serve_video(name: str):
    """–û—Ç–¥–∞—ë—Ç mp4-—Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ downloads –ø–æ –∞–¥—Ä–µ—Å—É /video/{name}.mp4"""
    file_path = os.path.join("downloads", f"{name}.mp4")
    if not await asyncio.to_thread(os.path.isfile, file_path):
        try:
            async with aiofiles.open("templates/video_not_found.html", encoding="utf-8") as f:
                html = await f.read()
        except Exception:
            html = "<h1>404 Not Found</h1><p>–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>"
        return HTMLResponse(content=html, status_code=404)
    
    return FileResponse(file_path, media_type="video/mp4", filename=f"{name}.mp4")

@app.exception_handler(404)
async def custom_404_handler(request: Request, exc):
    if request.url.path.startswith("/video/"):
        try:
            async with aiofiles.open("templates/video_not_found.html", encoding="utf-8") as f:
                html = await f.read()
        except Exception:
            html = "<h1>404 Not Found</h1><p>–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>"
    else:
        try:
            async with aiofiles.open("templates/page_not_found.html", encoding="utf-8") as f:
                html = await f.read()
        except Exception:
            html = "<h1>404 Not Found</h1><p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</p>"

    return HTMLResponse(content=html, status_code=404)

# ------------------------------- Utilities ----------------------------------
def _calc_expiry(days: int) -> datetime:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (UTC) (8)."""
    return datetime.now(timezone.utc) + timedelta(days=days)

# ------------------------------- Webhook ------------------------------------
@app.post("/yookassa")
async def yookassa_webhook(request: Request) -> JSONResponse:  # (2)
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook YooKassa (–±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è raw JSON) (1,16)."""
    logger.info("WEBHOOK RAW BODY: %s", await request.json())
    bot: Bot = app.state.bot
    admin_errors: list[str] = []  # (15) –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    try:
        data: dict[str, Any] = await request.json()
        logger.info("WEBHOOK RAW BODY: %s", data)
        logger.info("üöÄ [WEBHOOK] start: %s", data)
    except JSONDecodeError as e:  # (6) —É–∑–∫–∏–π except
        logger.error("‚ùå [WEBHOOK] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ webhook: %s", e)
        raise HTTPException(status_code=400, detail="Invalid JSON") from e
    except Exception as e:  # fallback
        logger.exception("‚ùå [WEBHOOK] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ webhook")
        raise HTTPException(status_code=400, detail="Invalid body") from e

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è (6)
    try:
        obj = data["object"]
        payment_status: str = obj["status"]
        metadata = obj["metadata"]
        user_id = int(metadata["user_id"])  # (2)
        tariff_id = int(metadata["tariff_id"])
        payment_id: str = obj.get("id", "")
    except KeyError as e:
        logger.error("‚ùå [WEBHOOK] –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á –≤ webhook: %s", e)
        raise HTTPException(status_code=400, detail="Missing key") from e
    except ValueError as e:  # (6) –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ int
        logger.error("‚ùå [WEBHOOK] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ –≤ webhook: %s", e)
        raise HTTPException(status_code=400, detail="Bad number") from e

    # Idempotency —á–µ—Ä–µ–∑ –ë–î
    if payment_id:
        async with get_session() as session:
            if await is_payment_processed(session, payment_id):
                logger.info("üîÅ [WEBHOOK] –î—É–±–ª–∏–∫–∞—Ç webhook –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω (payment_id=%s, user_id=%s)", payment_id, user_id)
                return JSONResponse(content={"status": "ok", "duplicate": True})

    if payment_status == "succeeded":  # —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø—Ä–µ–∂–Ω—é—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
        days = 0
        try:
            async with get_session() as session:
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ idempotency (–≥–æ–Ω–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏)
                if payment_id and await is_payment_processed(session, payment_id):
                    logger.info("üîÅ [WEBHOOK] –î—É–±–ª–∏–∫–∞—Ç (–≥–æ–Ω–∫–∞) webhook –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω (payment_id=%s, user_id=%s)", payment_id, user_id)
                    return JSONResponse(content={"status": "ok", "duplicate": True})
                tariff = await get_tariff_by_id(session, tariff_id)
                days = tariff.duration_days  # type: ignore[assignment]
                await add_subscriber_with_duration(session, user_id, days)
                await mark_payment_processed(session, payment_id, user_id)
                await mark_user_has_paid(session, user_id)
                logger.info("‚úÖ [PAYMENT] –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞: user_id=%s, –¥–Ω–µ–π=%s, —Ç–∞—Ä–∏—Ñ=%s", user_id, days, tariff_id)
        except Exception as e:  # (6)
            logger.exception("‚ùå [PAYMENT] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞—Ä–∏—Ñ–∞/–ø–æ–¥–ø–∏—Å–∫–∏ (user_id=%s, tariff_id=%s)", user_id, tariff_id)
            raise HTTPException(status_code=400, detail="Tariff error") from e

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä—É–ø–ø—ã
        try:
            user = await bot.get_chat(user_id)
            username = f"@{user.username}" if getattr(user, "username", None) else "‚Äî"
            full_name = getattr(user, "full_name", None) or getattr(user, "first_name", None) or "‚Äî"
            expire_dt = _calc_expiry(days)
            expire_str = expire_dt.strftime('%d.%m.%Y')  # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (8)

            await bot.send_message(
                user_id,
                (
                    f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ <b>{days} –¥–Ω–µ–π</b>!\n\n"
                    f"üè∑Ô∏è –¢–∞—Ä–∏—Ñ: <b>{getattr(tariff, 'name', '‚Äî')}</b>\n"
                    f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ (UTC): <b>{expire_str}</b>"
                ),
                parse_mode="HTML",
            )
            await bot.send_message(
                SUPPORT_GROUP_ID,
                (
                    f"<b>üí≥ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞</b>\n\n"
                    f"üë§ {full_name} ({username})\n"
                    f"üÜî <code>{user_id}</code>\n"
                    f"üè∑Ô∏è {getattr(tariff, 'name', '‚Äî')}\n"
                    f"‚è≥ {days} –¥–Ω.\n"
                    f"üìÖ –î–æ: {expire_str} (UTC)\n"
                ),
                parse_mode="HTML",
                message_thread_id=SUBSCRIBE_TOPIC_ID,
            )
        except Exception as e:  # (6)
            logger.exception("‚ùå [SEND] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–≥—Ä—É–ø–ø—ã (user_id=%s)", user_id)
            
    return JSONResponse(content={"status": "ok"})

# ------------------------------- Startup ------------------------------------
@app.on_event("startup")
async def on_startup() -> None:  # (2)
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
    logger.info("üöÄ [STARTUP] FastAPI –∑–∞–ø—É—â–µ–Ω (—Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞)")
    app.state.bot = Bot(token=BOT_TOKEN)

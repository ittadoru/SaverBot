services:
  postgres:
    image: postgres:16
    container_name: saverbot_postgres
    restart: always
    env_file: [.env]
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?must-set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?must-set}
      POSTGRES_DB: ${POSTGRES_DB:?must-set}
    ports: ["5433:5432"]
    volumes:
      - saverbot_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 12

  bot:
    build: .
    image: saver_bot
    container_name: saverbot_bot
    restart: always
    env_file: [.env]
    working_dir: /app
    volumes: [ .:/app ]
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Running migrations (bot)...';
        if ls alembic/versions/*.py 1>/dev/null 2>&1; then
          alembic upgrade head || { echo 'Alembic failed'; exit 1; }
        else
          python -m scripts.ensure_schema || { echo 'ensure_schema failed'; exit 1; }
        fi;
        watchfiles --filter python 'python bot.py'
      "

  api:
    image: saver_bot
    container_name: saverbot_api
    restart: always
    env_file: [.env]
    working_dir: /app
    volumes: [ .:/app ]
    depends_on:
      postgres:
        condition: service_healthy
      bot:
        condition: service_started
    command: >
      bash -c "
        echo 'Ensuring schema (api)...';
        if ls alembic/versions/*.py 1>/dev/null 2>&1; then
          echo 'Revisions present (already migrated by bot).';
        else
          python -m scripts.ensure_schema || true
        fi;
        uvicorn server:app --host 0.0.0.0 --port 8000 --reload
      "

  nginx:
    image: nginx:1.25
    container_name: nginx
    restart: always
    ports:
      - "8008:80"
      - "8443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - api

volumes:
  saverbot_pgdata:
import re
from datetime import date, timedelta
from aiogram import Bot
from utils import logger as log
from redis_db import r

async def get_top_downloaders_all_time(limit=5):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.
    """
    keys = await r.keys("downloads:user:*")
    top = []

    for key in keys:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª—é—á–∏ —Å –¥–∞—Ç–æ–π (—Å—á–∏—Ç–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è 7-–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
        if re.match(r"downloads:user:\d{4}-\d{2}-\d{2}:\d+", key):
            continue

        user_id = key.split(":")[-1]
        count = await r.get(key)
        top.append((int(user_id), int(count)))

    top.sort(key=lambda x: x[1], reverse=True)
    return top[:limit]

async def get_top_downloaders_last_7_days(limit=5):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.
    """
    today = date.today()
    counters = {}

    for i in range(7):
        day = today - timedelta(days=i)
        day_str = day.isoformat()
        keys = await r.keys(f"downloads:user:{day_str}:*")

        for key in keys:
            parts = key.split(":")
            user_id = int(parts[-1])
            count = await r.get(key)
            counters[user_id] = counters.get(user_id, 0) + int(count)

    sorted_users = sorted(counters.items(), key=lambda x: x[1], reverse=True)
    return sorted_users[:limit]

async def increment_download(platform: str, user_id: int):
    """
    –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π (–æ–±—â–∏–π, –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
    """
    await r.incr("downloads:total")
    await r.incr(f"downloads:{platform}")
    await r.incr(f"user:{user_id}:downloads")

    today_str = date.today().isoformat()
    key = f"downloads:user:{today_str}:{user_id}"
    await r.incr(key)
    # –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Äî 8 –¥–Ω–µ–π (–¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
    await r.expire(key, 8 * 24 * 60 * 60)
    
async def increment_daily_download(user_id: int):
    """
    –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è.
    """
    key = f"downloads:user:{date.today().isoformat()}:{user_id}"
    await r.incr(key)
    # –•—Ä–∞–Ω–∏–º 2 –¥–Ω—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–∞–Ω–Ω–∏—Ö —É–¥–∞–ª–µ–Ω–∏–π
    await r.expire(key, 2 * 24 * 60 * 60)

async def get_daily_downloads(user_id: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è.
    """
    key = f"downloads:user:{date.today().isoformat()}:{user_id}"
    return int(await r.get(key) or 0)

async def get_weekly_downloads(user_id: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.
    """
    today = date.today()
    total = 0
    for i in range(7):
        day = today - timedelta(days=i)
        key = f"downloads:user:{day.isoformat()}:{user_id}"
        count = await r.get(key)
        if count:
            total += int(count)
    return total

async def notify_limit_exceeded(user_id: int, bot: Bot, limit: int):
    """
    –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π.
    """
    try:
        text = (
            f"‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–π ({limit} –≤ —Å—É—Ç–∫–∏). "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º!"
        )
        log.log_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {limit}", emoji="üö´")
        await bot.send_message(user_id, text)
    except Exception as e:
        log.log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
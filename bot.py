"""–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞/DP –∏ –∑–∞–ø—É—Å–∫ polling."""

from __future__ import annotations

import asyncio
import logging
from aiogram import Bot
from aiogram.types import BotCommand

from loader import bot, dp
from handlers import register_handlers
from utils.logger import setup_logger

logger = logging.getLogger(__name__)


async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞."""
    commands = [
        BotCommand(command="subscribe", description="‚≠êÔ∏è –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand(command="start", description="üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="invite", description="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"),
        BotCommand(command='help', description='‚ùì –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É'),
        BotCommand(command="promocode", description="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"),
    ]
    await bot.set_my_commands(commands)


async def main() -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç polling."""

    setup_logger(bot)
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    register_handlers(dp)

    logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
    await set_bot_commands(bot)

    logger.info("–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤ –∏ –∑–∞–ø—É—Å–∫ polling...")
    await bot.delete_webhook(drop_pending_updates=True)

    try:
        logger.info("Bot started (polling mode).")
        await dp.start_polling(bot)
    except asyncio.CancelledError:  # –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        logger.info("Polling cancelled.")
        raise
    finally:
        await bot.session.close()
        logger.info("Bot session closed.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")

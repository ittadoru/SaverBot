"""–ê–¥–º–∏–Ω: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏ (—Å–ø–∏—Å–æ–∫, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)."""

import logging

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import ADMINS
from db.base import get_session
from db.tariff import create_tariff, delete_tariff, get_all_tariffs, update_tariff
from states.tariff import TariffStates

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router = Router()
router.message.filter(F.from_user.id.in_(ADMINS))
router.callback_query.filter(F.from_user.id.in_(ADMINS))


@router.callback_query(F.data == "tariff_menu")
async def tariff_menu_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'tariff_menu'."""
    await tariff_menu(message=callback.message, edit=True)
    await callback.answer()


async def tariff_menu(message: Message, edit: bool = False) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏ —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —ç–º–æ–¥–∑–∏ –∏ —Å–≤–æ–¥–∫–æ–π –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º.
    """
    async with get_session() as session:
        tariffs = await get_all_tariffs(session)
    summary_lines = ["<b>üí∞ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏</b>\n"]
    if tariffs:
        for t in tariffs:
            summary_lines.append(f"‚Ä¢ <b>#{t.id} {t.name}</b> ‚Äî {t.duration_days} –¥–Ω. / {t.price} ‚ÇΩ")
    else:
        summary_lines.append("<i>–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π!</i>")
    text = "\n".join(summary_lines)
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="add_tariff")
    if tariffs:
        builder.button(text="üñãÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="edit_tariff_pick")
        builder.button(text="‚úñÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="delete_tariff_menu")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu")
    builder.adjust(1)
    if edit:
        await message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
    else:
        await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())


@router.callback_query(F.data == "delete_tariff_menu")
async def delete_tariff_menu_callback(callback: CallbackQuery) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤."""
    async with get_session() as session:
        tariffs = await get_all_tariffs(session)

    builder = InlineKeyboardBuilder()
    if not tariffs:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="tariff_menu")
        await callback.message.edit_text(
            "‚ùå <b>–°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –ø—É—Å—Ç.</b>\n\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        await callback.answer()
        return

    for t in tariffs:
        builder.button(
            text=f"‚ùå {t.name} ({t.duration_days} –¥., {t.price} ‚ÇΩ)",
            callback_data=f"delete_tariff_confirm:{t.id}",
        )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="tariff_menu")
    builder.adjust(1)

    await callback.message.edit_text(
        "<b>‚úñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "add_tariff")
async def start_add_tariff(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ —ç–º–æ–¥–∑–∏.
    """
    await callback.message.edit_text(
        "<b>‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥'.</i>",
        parse_mode="HTML"
    )
    await state.set_state(TariffStates.waiting_for_name)
    await callback.answer()


@router.callback_query(F.data.startswith("delete_tariff_confirm:"))
async def delete_tariff_handler(callback: CallbackQuery) -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è."""
    tariff_id = int(callback.data.split(":")[1])
    async with get_session() as session:
        await delete_tariff(session, tariff_id)

    logger.info(
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d —É–¥–∞–ª–∏–ª —Ç–∞—Ä–∏—Ñ —Å id %d", callback.from_user.id, tariff_id
    )
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await delete_tariff_menu_callback(callback)


@router.message(TariffStates.waiting_for_name)
async def process_tariff_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å."""
    if not message.text or len(message.text) > 50:
        await message.answer(
            "‚ùóÔ∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            parse_mode="HTML"
        )
        return
    await state.update_data(name=message.text.strip())
    await message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –≤ –¥–Ω—è—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
        parse_mode="HTML"
    )
    await state.set_state(TariffStates.waiting_for_days)


@router.message(TariffStates.waiting_for_days)
async def process_tariff_days(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—É."""
    if not message.text.isdigit() or not 0 < int(message.text) < 10000:
        await message.answer(
            "‚ùóÔ∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9999):</b>",
            parse_mode="HTML"
        )
        return
    await state.update_data(days=int(message.text))
    await message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞ –≤ —Ä—É–±–ª—è—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –∫–æ–ø–µ–µ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä 199):",
        parse_mode="HTML"
    )
    await state.set_state(TariffStates.waiting_for_price)


@router.message(TariffStates.waiting_for_price)
async def process_tariff_price(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ü–µ–Ω—ã –∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ."""
    if not (message.text and message.text.isdigit() and 0 < int(message.text) < 1_000_000):
        await message.answer(
            "‚ùóÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¶–ï–õ–£–Æ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (1 .. 999999):</b>",
            parse_mode="HTML"
        )
        return
    price = int(message.text)

    data = await state.get_data()
    name = data["name"]
    days = data["days"]

    async with get_session() as session:
        await create_tariff(session, name=name, price=price, duration_days=days)

    logger.info(
        "–ê–¥–º–∏–Ω %d —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: %s, %d –¥–Ω–µ–π, %d RUB",
        message.from_user.id,
        name,
        days,
        price,
    )

    await message.answer(
        f"‚úÖ <b>–¢–∞—Ä–∏—Ñ ¬´{name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{days}</b> –¥–Ω–µ–π\n"
        f"–¶–µ–Ω–∞: <b>{price} ‚ÇΩ</b>",
        parse_mode="HTML"
    )
    await state.clear()

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤
    await tariff_menu(message=message)


# ---------------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ ----------------
@router.callback_query(F.data == "edit_tariff_pick")
async def edit_tariff_pick(callback: CallbackQuery, state: FSMContext) -> None:
    async with get_session() as session:
        tariffs = await get_all_tariffs(session)
    if not tariffs:
        await callback.answer("‚ùå –ù–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
        return
    kb = InlineKeyboardBuilder()
    for t in tariffs:
        kb.button(text=f"#{t.id} {t.name}", callback_data=f"edit_tariff:{t.id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="tariff_menu")
    kb.adjust(1)
    await callback.message.edit_text(
        "<b>üñãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
        parse_mode="HTML",
        reply_markup=kb.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_tariff:"))
async def edit_tariff_field_select(callback: CallbackQuery, state: FSMContext) -> None:
    tariff_id = int(callback.data.split(":", 1)[1])
    await state.update_data(edit_tariff_id=tariff_id)
    kb = InlineKeyboardBuilder()
    kb.button(text="üìù –ò–º—è", callback_data="edit_field:name")
    kb.button(text="üìÖ –î–Ω–∏", callback_data="edit_field:days")
    kb.button(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_field:price")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="tariff_menu")
    kb.adjust(2, 2, 1)
    await callback.message.edit_text(
        f"<b>–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ç–∞—Ä–∏—Ñ–µ #{tariff_id}?</b>",
        parse_mode="HTML",
        reply_markup=kb.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_field:"))
async def edit_tariff_start(callback: CallbackQuery, state: FSMContext) -> None:
    field = callback.data.split(":", 1)[1]
    await state.update_data(edit_field=field)
    prompt_map = {
        "name": "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ç–∞—Ä–∏—Ñ–∞:</b>",
        "days": "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π):</b>",
        "price": "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Ä—É–±.):</b>",
    }
    await state.set_state(TariffStates.editing_new_value)
    await callback.message.edit_text(prompt_map[field], parse_mode="HTML")
    await callback.answer()


@router.message(TariffStates.editing_new_value)
async def process_edit_value(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    tariff_id = data.get("edit_tariff_id")
    field = data.get("edit_field")
    if not tariff_id or not field:
        await message.answer(
            "‚ùóÔ∏è <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤: /admin</b>",
            parse_mode="HTML"
        )
        await state.clear()
        return
    raw = (message.text or "").strip()
    update_kwargs = {}
    if field == "name":
        if not raw or len(raw) > 50:
            await message.answer(
                "‚ùóÔ∏è <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (1..50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:</b>",
                parse_mode="HTML"
            )
            return
        update_kwargs["name"] = raw
    elif field == "days":
        if not raw.isdigit() or not (0 < int(raw) < 10000):
            await message.answer(
                "‚ùóÔ∏è <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:</b>",
                parse_mode="HTML"
            )
            return
        update_kwargs["duration_days"] = int(raw)
    elif field == "price":
        if not raw.isdigit() or not (0 < int(raw) < 1_000_000):
            await message.answer(
                "‚ùóÔ∏è <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:</b>",
                parse_mode="HTML"
            )
            return
        update_kwargs["price"] = int(raw)
    else:
        await message.answer(
            "‚ùóÔ∏è <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ.</b>",
            parse_mode="HTML"
        )
        await state.clear()
        return
    async with get_session() as session:
        tariff = await update_tariff(session, tariff_id, **update_kwargs)
    if not tariff:
        await message.answer(
            "‚ùå <b>–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚úÖ <b>–ò–∑–º–µ–Ω–µ–Ω–æ!</b>",
            parse_mode="HTML"
        )
    await state.clear()
    await tariff_menu(message)

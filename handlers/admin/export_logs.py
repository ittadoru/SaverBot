"""–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤: —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω—É."""

import logging
import os
import asyncio
import re
from aiogram import F, Router
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, FSInputFile, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


class LogCallback(CallbackData, prefix="log_select"):
    """–§–∞–±—Ä–∏–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞."""
    filename: str


LOG_DIR = "logs"
logger = logging.getLogger(__name__)
router = Router()

async def get_current_log():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–≥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å."""
    if not await asyncio.to_thread(os.path.exists, LOG_DIR):
        return None
    files = await asyncio.to_thread(os.listdir, LOG_DIR)
    return "bot.log" if "bot.log" in files else None

async def get_archived_logs():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –ª–æ–≥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∞ bot_YYYY-MM-DD.log."""
    if not await asyncio.to_thread(os.path.exists, LOG_DIR):
        return []
    files = await asyncio.to_thread(os.listdir, LOG_DIR)
    log_pattern = re.compile(r"^bot_(\d{4})-(\d{2})-(\d{2})\.log$")
    archived_logs = sorted(
        [f for f in files if log_pattern.match(f)],
        reverse=True
    )
    return archived_logs

@router.callback_query(F.data == "get_logs")
async def show_log_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤: —Ç–µ–∫—É—â–∏–π –ª–æ–≥ –∏ –∞—Ä—Ö–∏–≤–Ω—ã–µ –ª–æ–≥–∏."""
    builder = InlineKeyboardBuilder()
    current_log = await get_current_log()
    if current_log:
        builder.button(
            text="üìÑ –¢–µ–∫—É—â–∏–π –ª–æ–≥",
            callback_data=LogCallback(filename=current_log).pack()
        )
    builder.row(InlineKeyboardButton(text="üóÇÔ∏è –ê—Ä—Ö–∏–≤–Ω—ã–µ –ª–æ–≥–∏", callback_data="show_archived_logs"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu"))

    await callback.message.edit_text(
        "üìù <b>–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "show_archived_logs")
async def show_archived_logs_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∞—Ä—Ö–∏–≤–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã)."""
    archived_logs = await get_archived_logs()
    builder = InlineKeyboardBuilder()
    if not archived_logs:
        await callback.answer("–ê—Ä—Ö–∏–≤–Ω—ã—Ö –ª–æ–≥–æ–≤ –Ω–µ—Ç.", show_alert=True)
        return
    for filename in archived_logs:
        m = re.match(r"bot_(\d{4})-(\d{2})-(\d{2})\.log", filename)
        if m:
            date_str = f"{m.group(1)}-{m.group(2)}-{m.group(3)}"
            display_name = date_str
        else:
            display_name = filename
        builder.button(
            text=display_name,
            callback_data=LogCallback(filename=filename).pack()
        )
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="get_logs"))

    await callback.message.edit_text(
        "ÔøΩÔ∏è <b>–ê—Ä—Ö–∏–≤–Ω—ã–µ –ª–æ–≥–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(LogCallback.filter())
async def send_log_file(callback: CallbackQuery, callback_data: LogCallback):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    filename = callback_data.filename
    log_path = os.path.join(LOG_DIR, filename)
    user_id = callback.from_user.id

    if await asyncio.to_thread(os.path.getsize, log_path) == 0:
        logger.info(f"‚ö†Ô∏è [EXPORT] –ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—É—Å—Ç–æ–π –ª–æ–≥: {filename}")
        await callback.answer(f"‚ö†Ô∏è –§–∞–π–ª <b>{filename}</b> –ø—É—Å—Ç.", show_alert=True, parse_mode="HTML")
        return

    file = FSInputFile(log_path)
    await callback.message.answer_document(file, caption=f"üìÑ –í–∞—à –ª–æ–≥: <code>{filename}</code>", parse_mode="HTML")
    logger.info(f"‚úÖ [EXPORT] –õ–æ–≥ {filename} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {user_id}")
    await callback.answer()
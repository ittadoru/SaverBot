from aiogram import Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from config import ADMIN_ERROR
from states.ad_broadcast import AdBroadcastStates
import redis_db as redis
from redis_db.subscribers import get_all_subscribers
from utils import logger as log

import traceback

router = Router()


@router.callback_query(lambda c: c.data == "ad_broadcast_start")
async def ad_broadcast_start(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç."""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(AdBroadcastStates.waiting_text)


@router.message(AdBroadcastStates.waiting_text)
async def process_ad_broadcast(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫—Ä–æ–º–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."""
    user_ids = await redis.r.smembers("users")
    subscribers = await get_all_subscribers()
    count_sent = 0

    for uid in user_ids:
        if str(uid) not in subscribers:
            try:
                await message.bot.send_message(uid, message.text)
                count_sent += 1
            except Exception as e:
                await message.bot.send_message(ADMIN_ERROR, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
                log.log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

    await message.reply(
        f"üì¢ –†–µ–∫–ª–∞–º–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count_sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–Ω–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º)."
    )
    log.log_message(
        f"–†–µ–∫–ª–∞–º–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count_sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–Ω–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º).",
        emoji="üì¢"
    )


from aiogram import Router
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from config import ADMIN_ERROR
from states.ad_broadcast import AdBroadcastStates
import redis_db as redis
from redis_db.subscribers import get_all_subscribers
from utils import logger as log


router = Router()


@router.callback_query(lambda c: c.data == "ad_broadcast_start")
async def ad_broadcast_start(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç."""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(AdBroadcastStates.waiting_text)



# –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(AdBroadcastStates.waiting_text)
async def process_ad_broadcast(message: Message, state: FSMContext):
    await state.update_data(broadcast_text=message.text)
    await message.answer("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –ø–æ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(AdBroadcastStates.waiting_button_choice)

# –®–∞–≥ 2: –£–∑–Ω–∞—ë–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
@router.message(AdBroadcastStates.waiting_button_choice)
async def process_button_choice(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text.lower() == "–¥–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:")
        await state.set_state(AdBroadcastStates.waiting_button_text)
    else:
        await send_broadcast(message, data["broadcast_text"])
        await state.clear()

# –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
@router.message(AdBroadcastStates.waiting_button_text)
async def process_button_text(message: Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
    await state.set_state(AdBroadcastStates.waiting_button_url)

# –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É

@router.message(AdBroadcastStates.waiting_button_url)
async def process_button_url(message: Message, state: FSMContext):
    data = await state.get_data()
    button_text = data["button_text"]
    button_url = message.text.strip()
    text = data["broadcast_text"]
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    if not (button_url.startswith("http://") or button_url.startswith("https://")):
        await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://")
        return
    markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=button_text, url=button_url)]]
    )
    try:
        await send_broadcast(message, text, markup)
    except Exception as e:
        await message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def send_broadcast(message: Message, text: str, markup: InlineKeyboardMarkup = None):
    user_ids = await redis.r.smembers("users")
    subscribers = await get_all_subscribers()
    count_sent = 0

    for uid in user_ids:
        if str(uid) not in subscribers:
            try:
                await message.bot.send_message(uid, text, reply_markup=markup)
                count_sent += 1
            except Exception as e:
                await message.bot.send_message(ADMIN_ERROR, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
                log.log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

    await message.reply(
        f"üì¢ –†–µ–∫–ª–∞–º–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count_sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–Ω–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º)."
    )
    log.log_message(
        f"–†–µ–∫–ª–∞–º–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count_sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–Ω–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º).",
        emoji="üì¢"
    )

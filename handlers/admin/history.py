from aiogram import types, Router
from aiogram.fsm.context import FSMContext

from redis_db import r
from redis_db.users import get_user_links
from states.history import HistoryStates
from datetime import datetime
from utils import logger as log

router = Router()


@router.callback_query(lambda c: c.data == "user_history_start")
async def show_user_history(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å ID –∏–ª–∏ username –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    await state.set_state(HistoryStates.waiting_for_id_or_username)

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_users")]
        ]
    )

    await callback.message.edit_text(
        "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.message(HistoryStates.waiting_for_id_or_username)
async def process_id_or_username(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ ID –∏–ª–∏ username, –ø–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    arg = message.text.strip()
    user_id = None

    if arg.isdigit():
        user_id = int(arg)
    else:
        # –ü–æ–∏—Å–∫ –ø–æ username (–±–µ–∑ @, –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
        username = arg.lstrip("@").lower()
        user_ids = await r.smembers("users")

        for uid in user_ids:
            data = await r.hgetall(f"user:{uid}")
            if data.get("username", "").lower() == username:
                user_id = int(uid)
                break

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    if user_id is None:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_data = await r.hgetall(f"user:{user_id}")
    expire_timestamp = await r.get(f"subscriber:expire:{user_id}")
    if expire_timestamp:
        expire_timestamp = int(expire_timestamp)
        expiry_date = datetime.fromtimestamp(expire_timestamp)
        if expiry_date > datetime.now():
            subscription_status = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{expiry_date.strftime('%d.%m.%Y %H:%M')}</b>"
        else:
            subscription_status = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
    else:
        subscription_status = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"

    links = await get_user_links(user_id)
    name = user_data.get("first_name", "")
    username = user_data.get("username", "")

    user_info = "<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n\n"
    user_info += f"ID: <code>{user_id}</code>\n"
    user_info += f"–ò–º—è: {name}\n"
    user_info += f"{subscription_status}\n"
    if username:
        user_info += f"Username: @{username}\n"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∑–∞–¥
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"delete_user:{user_id}")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_users")]
        ]
    )

    if not links:
        await message.answer(
            user_info + "\n‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å—Å—ã–ª–æ–∫.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await state.clear()
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    links_text = "\n".join([f"<pre>{link}</pre>" for link in links[:5]])
    full_text = user_info + "\n\n<b>üîó –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏:</b>\n\n" + links_text

    log.log_message(f"–ê–¥–º–∏–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", emoji="üìú")
    await message.answer(full_text, parse_mode="HTML", reply_markup=keyboard)
    await state.clear()

@router.callback_query(lambda c: c.data.startswith("delete_user:"))
async def delete_user_callback(callback: types.CallbackQuery):
    uid = callback.data.split(":")[1]

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
    await r.srem("users", uid)
    await r.srem("subscribers", uid)
    await r.delete(f"user:{uid}")
    await r.delete(f"user:busy:{uid}")

    await callback.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω", show_alert=True)
    log.log_message(f"–ê–¥–º–∏–Ω —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}", emoji="üóëÔ∏è")

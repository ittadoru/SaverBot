from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
import asyncio
from contextlib import suppress
import logging
from utils.keyboards import back_button
from config import BROADCAST_PROGRESS_UPDATE_INTERVAL, BROADCAST_PER_MESSAGE_DELAY

logger = logging.getLogger(__name__)
router = Router()

class BroadcastTrialStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    waiting_text = State()
    waiting_button_text = State()
    waiting_button_url = State()
    waiting_media = State()

def _keyboard(send_button_label: str) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="trial_broadcast:set_text"),
         InlineKeyboardButton(text="üìå –ö–Ω–æ–ø–∫–∞", callback_data="trial_broadcast:set_button"),
         InlineKeyboardButton(text="üé¨ –ú–µ–¥–∏–∞", callback_data="trial_broadcast:set_media")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="trial_broadcast:preview")],
        [InlineKeyboardButton(text=send_button_label, callback_data="trial_broadcast:send"),
         InlineKeyboardButton(text="üö´ –°—Ç–æ–ø", callback_data="trial_broadcast:cancel")],
    ])

@router.callback_query(F.data == "trial_broadcast_start")
async def start_broadcast_trial(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    await state.clear()
    await state.update_data(constructor_message_id=callback.message.message_id)
    await _edit_constructor(callback.message, state, bot)
    await callback.answer()

async def _edit_constructor(message: Message, state: FSMContext, bot: Bot):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    with suppress(TelegramAPIError):
        await message.edit_text(
            "üéØ –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –µ—â—ë –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª –ø–æ–∫—É–ø–æ–∫.",
            reply_markup=_keyboard("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"),
            parse_mode="Markdown"
        )

@router.callback_query(F.data == "trial_broadcast:cancel")
async def cancel_broadcast_trial(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    from handlers.admin.menu import get_admin_menu_keyboard
    await state.clear()
    await callback.message.edit_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_menu_keyboard())
    await callback.answer()

@router.callback_query(F.data == "trial_broadcast:set_text")
async def set_text(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await state.set_state(BroadcastTrialStates.waiting_text)
    prompt = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.update_data(prompt_message_id=prompt.message_id)
    await callback.answer()

@router.message(BroadcastTrialStates.waiting_text)
async def process_text(message: Message, state: FSMContext, bot: Bot):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    await state.update_data(text=message.text)
    await state.set_state(None)
    await _cleanup(message, state, bot)

@router.callback_query(F.data == "trial_broadcast:set_button")
async def set_button_text(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await state.set_state(BroadcastTrialStates.waiting_button_text)
    prompt = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:")
    await state.update_data(prompt_message_id=prompt.message_id)
    await callback.answer()

@router.message(BroadcastTrialStates.waiting_button_text)
async def process_button_text(message: Message, state: FSMContext, bot: Bot):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç URL."""
    await state.update_data(button_text=message.text)
    await state.set_state(BroadcastTrialStates.waiting_button_url)
    await _cleanup(message, state, bot)
    prompt = await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ URL (http/https):")
    await state.update_data(prompt_message_id=prompt.message_id)

@router.message(BroadcastTrialStates.waiting_button_url)
async def process_button_url(message: Message, state: FSMContext, bot: Bot):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç URL –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    url = (message.text or "").strip()
    if not (url.startswith("http://") or url.startswith("https://")):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π URL. –ù–∞—á–Ω–∏—Ç–µ —Å http:// –∏–ª–∏ https://")
        return
    await state.update_data(button_url=url)
    await state.set_state(None)
    await _cleanup(message, state, bot)

@router.callback_query(F.data == "trial_broadcast:set_media")
async def set_media(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await state.set_state(BroadcastTrialStates.waiting_media)
    prompt = await callback.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.update_data(prompt_message_id=prompt.message_id)
    await callback.answer()

@router.message(BroadcastTrialStates.waiting_media)
async def process_media(message: Message, state: FSMContext, bot: Bot):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —à–∞–≥."""
    media_id = media_type = None
    if message.photo:
        media_id, media_type = message.photo[-1].file_id, "photo"
    elif message.video:
        media_id, media_type = message.video.file_id, "video"
    elif message.text and message.text.strip() == "/skip":
        await state.update_data(media_id=None, media_type=None)
        await state.set_state(None)
        await _cleanup(message, state, bot)
        return
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –ª–∏–±–æ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
        return
    await state.update_data(media_id=media_id, media_type=media_type)
    await state.set_state(None)
    await _cleanup(message, state, bot)

@router.callback_query(F.data == "trial_broadcast:preview")
async def preview(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    data = await state.get_data()
    text = data.get("text")
    if not text:
        await callback.answer("‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç.", show_alert=True)
        return
    markup = _make_markup(data.get("button_text"), data.get("button_url"))
    media_id, media_type = data.get("media_id"), data.get("media_type")
    if media_id and media_type == "photo":
        await callback.message.answer_photo(media_id, caption=text, reply_markup=markup)
    elif media_id and media_type == "video":
        await callback.message.answer_video(media_id, caption=text, reply_markup=markup)
    else:
        await callback.message.answer(text, reply_markup=markup)
    await callback.answer()

@router.callback_query(F.data == "trial_broadcast:send")
async def send_broadcast_trial(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    data = await state.get_data()
    text = data.get("text")
    if not text:
        await callback.answer("‚ùóÔ∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
        return
    await callback.message.edit_text("‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–¥—ë—Ç –æ—Ç—á—ë—Ç.", reply_markup=back_button())
    asyncio.create_task(_send_task(bot, callback.from_user.id, data))
    await state.clear()
    await callback.answer()

async def _send_task(bot: Bot, admin_id: int, data: dict):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    from db.base import get_session
    from db.users import get_user_ids_never_paid
    text = data.get("text")
    markup = _make_markup(data.get("button_text"), data.get("button_url"))
    media_id, media_type = data.get("media_id"), data.get("media_type")
    sent = failed = 0
    async with get_session() as session:
        user_ids = await get_user_ids_never_paid(session)
    if not user_ids:
        await bot.send_message(admin_id, "‚ùóÔ∏è –ê—É–¥–∏—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∫–æ–º—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    total = len(user_ids)
    logger.info(f"üöÄ [TRIAL-BROADCAST] –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    progress_msg = await bot.send_message(admin_id, _render_progress_bar(0, total))
    last_update = asyncio.get_event_loop().time()
    for user_id in user_ids:
        try:
            if media_id and media_type == "photo":
                await bot.send_photo(user_id, media_id, caption=text, reply_markup=markup)
            elif media_id and media_type == "video":
                await bot.send_video(user_id, media_id, caption=text, reply_markup=markup)
            else:
                await bot.send_message(user_id, text, reply_markup=markup)
            sent += 1
        except TelegramAPIError as e:
            error_text = str(e)
            logger.info("üö´ [TRIAL-BROADCAST] TelegramAPIError (%s)", error_text)
            failed += 1
        except Exception as e:
            logger.error("üö´ [TRIAL-BROADCAST] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, e, exc_info=True)
            failed += 1
        now = asyncio.get_event_loop().time()
        if (sent % 100 == 0 or sent == total) or (now - last_update > BROADCAST_PROGRESS_UPDATE_INTERVAL):
            with suppress(TelegramAPIError):
                await bot.edit_message_text(
                    text=_render_progress_bar(sent, total),
                    chat_id=admin_id,
                    message_id=progress_msg.message_id
                )
            last_update = now
        await asyncio.sleep(BROADCAST_PER_MESSAGE_DELAY)

    logger.info("‚úÖ [TRIAL-BROADCAST] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ=%s –û—à–∏–±–æ–∫=%s", sent, failed)
    percent = int(sent / total * 100) if total else 0
    summary_text = (
        f"üí≥ [TRIAL-–†–ê–°–°–´–õ–ö–ê] –ó–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üßë‚Äçüéì –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {sent} ({percent}%)\n"
        f"‚ùóÔ∏è –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}"
    )
    with suppress(TelegramAPIError):
        await bot.edit_message_text(
            text=_render_progress_bar(sent, total),
            chat_id=admin_id,
            message_id=progress_msg.message_id
        )
    await bot.send_message(admin_id, summary_text, parse_mode="Markdown")

def _make_markup(button_text, button_url):
    """–°–æ–∑–¥–∞—ë—Ç InlineKeyboardMarkup –¥–ª—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞."""
    if button_text and button_url:
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=button_text, url=button_url)]])
    return None

def _render_progress_bar(sent, total, bar_length=10):
    """–†–µ–Ω–¥–µ—Ä–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ä–∞—Å—Å—ã–ª–∫–∏."""
    percent = sent / total if total else 0
    filled = int(bar_length * percent)
    bar = 'üü©' * filled + '‚¨ú' * (bar_length - filled)
    return f"–ü—Ä–æ–≥—Ä–µ—Å—Å: [{bar}] {int(percent*100)}% ({sent}/{total})"

async def _cleanup(message: Message, state: FSMContext, bot: Bot):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä."""
    data = await state.get_data()
    prompt_msg_id = data.get("prompt_message_id")
    constructor_msg_id = data.get("constructor_message_id")
    with suppress(TelegramAPIError):
        if prompt_msg_id:
            await bot.delete_message(message.chat.id, prompt_msg_id)
        await message.delete()
    if constructor_msg_id:
        with suppress(TelegramAPIError):
            await bot.edit_message_text(
                text="üéØ –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –µ—â—ë –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª –ø–æ–∫—É–ø–æ–∫.",
                chat_id=message.chat.id,
                message_id=constructor_msg_id,
                reply_markup=_keyboard("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"),
                parse_mode="Markdown"
            )

"""–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤: —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω—É."""

import logging
import os
import re
from aiogram import F, Router
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, FSInputFile, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

LOG_DIR = "logs"


class LogCallback(CallbackData, prefix="log_select"):
    """–§–∞–±—Ä–∏–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞."""
    filename: str


router = Router()


def get_log_files():
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤.
    –¢–µ–∫—É—â–∏–π –ª–æ–≥ 'bot.log' –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π, –∑–∞ –Ω–∏–º –∏–¥—É—Ç –∞—Ä—Ö–∏–≤–Ω—ã–µ.
    """
    if not os.path.exists(LOG_DIR):
        return []

    files = os.listdir(LOG_DIR)

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –ª–æ–≥–æ–≤, —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö TimedRotatingFileHandler
    # –ù–∞–ø—Ä–∏–º–µ—Ä, 'bot.log.2023-10-27'
    log_pattern = re.compile(r"^bot\.log\.(\d{4}-\d{2}-\d{2})$")

    current_log = "bot.log"
    archived_logs = sorted(
        [f for f in files if log_pattern.match(f)],
        reverse=True
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    log_files = []
    if current_log in files:
        log_files.append(current_log)

    log_files.extend(archived_logs)

    return log_files


@router.callback_query(F.data == "get_logs")
async def show_log_menu(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –ª–æ–≥–æ–≤ –≤ –≤–∏–¥–µ –µ–¥–∏–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """
    log_files = get_log_files()

    if not log_files:
        await callback.answer("üóÇÔ∏è –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    builder = InlineKeyboardBuilder()

    for filename in log_files:
        # –î–ª—è 'bot.log' –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–¢–µ–∫—É—â–∏–π", –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –¥–∞—Ç—É
        if filename == "bot.log":
            display_name = "üìÑ –¢–µ–∫—É—â–∏–π –ª–æ–≥"
        else:
            date_str = filename.replace("bot.log.", "")
            display_name = f"üóÇÔ∏è –ê—Ä—Ö–∏–≤ {date_str}"

        builder.button(
            text=display_name,
            callback_data=LogCallback(filename=filename).pack()
        )

    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu"))

    await callback.message.edit_text(
        "üìù <b>–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(LogCallback.filter())
async def send_log_file(callback: CallbackQuery, callback_data: LogCallback):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    filename = callback_data.filename
    log_path = os.path.join(LOG_DIR, filename)
    user_id = callback.from_user.id

    if not os.path.exists(log_path):
        logging.warning(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥: {filename}")
        await callback.answer(f"‚ùóÔ∏è –§–∞–π–ª <b>{filename}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True, parse_mode="HTML")
        return

    if os.path.getsize(log_path) == 0:
        logging.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—É—Å—Ç–æ–π –ª–æ–≥: {filename}")
        await callback.answer(f"‚ö†Ô∏è –§–∞–π–ª <b>{filename}</b> –ø—É—Å—Ç.", show_alert=True, parse_mode="HTML")
        return

    logging.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ª–æ–≥: {filename}")

    file = FSInputFile(log_path)
    await callback.message.answer_document(file, caption=f"üìÑ –í–∞—à –ª–æ–≥: <code>{filename}</code>", parse_mode="HTML")
    await callback.answer()

from aiogram import Router, types
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from redis_db.subscribers import get_all_promocodes, remove_promocode, add_promocode
from utils import logger as log
from config import ADMINS
from states.promo import PromoStates

router = Router()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
@router.callback_query(lambda c: c.data == "add_promocode")
async def add_promocode_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–¥–Ω–µ–π) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: CODE123 30"
    )
    await state.set_state(PromoStates.add)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@router.message(PromoStates.add)
async def process_add_promocode(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    data = await state.get_data()
    attempts = data.get("add_attempts", 0)

    if message.text:
        parts = message.text.strip().split()
        if len(parts) == 2 and parts[1].isdigit():
            code, days = parts[0], int(parts[1])
            await add_promocode(code, days)
            log.log_message(
                f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥: {code} –Ω–∞ {days} –¥–Ω–µ–π –∞–¥–º–∏–Ω–æ–º "
                f"{message.from_user.username} ({message.from_user.id})",
                emoji="üéü"
            )
            await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ {code} –Ω–∞ {days} –¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω.")
            await state.clear()
        else:
            attempts += 1
            if attempts < 2:
                await state.update_data(add_attempts=attempts)
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: CODE123 30\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            else:
                await message.answer("–í—ã –¥–≤–∞–∂–¥—ã –æ—à–∏–±–ª–∏—Å—å —Å —Ñ–æ—Ä–º–∞—Ç–æ–º. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
@router.callback_query(lambda c: c.data == "remove_promocode")
async def remove_promocode_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(PromoStates.remove)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@router.message(PromoStates.remove)
async def process_remove_promocode(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    code = message.text.strip()
    promocodes = await get_all_promocodes()

    if code in promocodes:
        await remove_promocode(code)
        log.log_message(
            f"–£–¥–∞–ª—ë–Ω –ø—Ä–æ–º–æ–∫–æ–¥: {code} –∞–¥–º–∏–Ω–æ–º "
            f"{message.from_user.username} ({message.from_user.id})",
            emoji="üóë"
        )
        text = f"–ü—Ä–æ–º–æ–∫–æ–¥ {code} —É–¥–∞–ª—ë–Ω."
    else:
        text = f"–ü—Ä–æ–º–æ–∫–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω."

    await message.answer(text)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã"
@router.callback_query(lambda c: c.data == "all_promocodes")
async def show_all_promocodes(callback: CallbackQuery):
    promocodes = await get_all_promocodes()

    if promocodes:
        text = "<b>–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n" + "\n".join(
            [f"{k}: {v} –¥–Ω–µ–π" for k, v in promocodes.items()]
        )
    else:
        text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."

    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()

"""–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –º–∞—Å—Å–æ–≤–æ–µ –æ—á–∏—â–µ–Ω–∏–µ."""

import logging

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton

from config import ADMINS
from db.base import get_session
from db.promocodes import (add_promocode, get_all_promocodes,
                           remove_all_promocodes, remove_promocode)
from states.promo import PromoStates

router = Router()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ---

def get_promo_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="add_promocode"))
    builder.row(InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="remove_promocode"))
    builder.row(InlineKeyboardButton(text="üéü –í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="all_promocodes"))
    builder.row(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="remove_all_promocodes"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu"))
    return builder.as_markup()


async def show_promo_menu(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏."""
    await callback.message.edit_text(
        "–ú–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:",
        reply_markup=get_promo_menu_keyboard()
    )
    await callback.answer()


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ---

@router.callback_query(F.data == "add_promocode")
async def add_promocode_start(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.\n\n"
        "<b>–§–æ—Ä–º–∞—Ç:</b> <code>–ö–û–î –î–ù–ò [–ö–û–õ-–í–û]</code>\n\n"
        "‚Ä¢ <code>–ö–û–î</code> ‚Äî —Å–∞–º –ø—Ä–æ–º–æ–∫–æ–¥ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤).\n"
        "‚Ä¢ <code>–î–ù–ò</code> ‚Äî —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö.\n"
        "‚Ä¢ <code>–ö–û–õ-–í–û</code> ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á. 1).\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä 1 (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π):</b> <code>SALE25 30</code>\n"
        "<b>–ü—Ä–∏–º–µ—Ä 2 (–º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π):</b> <code>MULTI 90 100</code>",
        parse_mode="HTML"
    )
    await state.set_state(PromoStates.add)
    await callback.answer()


@router.message(PromoStates.add)
async def process_add_promocode(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    if message.from_user.id not in ADMINS or not message.text:
        await state.clear()
        return

    parts = message.text.strip().split()
    code, days, uses_left = None, None, 1

    if len(parts) == 2 and parts[1].isdigit():
        code, days = parts[0], int(parts[1])
    elif len(parts) == 3 and parts[1].isdigit() and parts[2].isdigit():
        code, days, uses_left = parts[0], int(parts[1]), int(parts[2])

    if code and days:
        async with get_session() as session:
            await add_promocode(session, code, days, uses_left)

        logging.info(
            f"–ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥: {code}, "
            f"{days} –¥–Ω., {uses_left} –∏—Å–ø."
        )
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{code.upper()}</code> –Ω–∞ {days} –¥–Ω. "
            f"({uses_left} –∞–∫—Ç–∏–≤–∞—Ü–∏–π) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."
        )
        await state.clear()
    else:
        await message.answer(
            "‚ùóÔ∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            "–§–æ—Ä–º–∞—Ç: <code>–ö–û–î –î–ù–ò [–ö–û–õ–ò–ß–ï–°–¢–í–û]</code>",
            parse_mode="HTML"
        )


# --- –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ---

@router.callback_query(F.data == "remove_promocode")
async def remove_promocode_start(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(PromoStates.remove)
    await callback.answer()


@router.message(PromoStates.remove)
async def process_remove_promocode(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥."""
    if message.from_user.id not in ADMINS or not message.text:
        await state.clear()
        return

    code = message.text.strip()
    async with get_session() as session:
        success = await remove_promocode(session, code)
        if success:
            logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É–¥–∞–ª–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥: {code}.")
            text = f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{code.upper()}</code> —É–¥–∞–ª—ë–Ω."
        else:
            text = f"‚ùóÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ <code>{code.upper()}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω."

    await message.answer(text, parse_mode="HTML")
    await state.clear()


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ ---

@router.callback_query(F.data == "all_promocodes")
async def show_all_promocodes(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""
    async with get_session() as session:
        promocodes = await get_all_promocodes(session)

        if promocodes:
            text = "<b>üéü –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n\n" + "\n".join(
                [
                    f"<code>{p.code}</code> ‚Äî {p.duration_days} –¥–Ω. "
                    f"(–æ—Å—Ç–∞–ª–æ—Å—å: {p.uses_left})"
                    for p in promocodes
                ]
            )
        else:
            text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promocode_menu_show"))
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await callback.answer()


# --- –£–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º) ---

@router.callback_query(F.data == "remove_all_promocodes")
async def ask_remove_all_confirmation(callback: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üóë –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="confirm_remove_all"),
        InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="promocode_menu_show")
    )
    await callback.message.edit_text(
        "<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã?</b>\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "confirm_remove_all")
async def confirm_remove_all_promocodes(callback: CallbackQuery):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é."""
    async with get_session() as session:
        await remove_all_promocodes(session)
        logging.warning(f"–ê–¥–º–∏–Ω {callback.from_user.id} —É–¥–∞–ª–∏–ª –í–°–ï –ø—Ä–æ–º–æ–∫–æ–¥—ã.")

    await callback.answer("‚úÖ –í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", show_alert=True)
    await show_promo_menu(callback)


# --- –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é ---

@router.callback_query(F.data == "promocode_menu_show")
async def back_to_promo_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥', –≤–æ–∑–≤—Ä–∞—â–∞—è –≤ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""
    await show_promo_menu(callback)
from math import ceil
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.keyboards import pagination_keyboard
import logging
from config import ADMINS
from db.base import get_session
from db.promocodes import (add_promocode, get_all_promocodes,
                           remove_all_promocodes, remove_promocode)
from states.promo import PromoStates


router = Router()

PROMOCODES_PER_PAGE = 20
class PromoPageCallback(CallbackData, prefix="promo_page"):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –º–∞—Å—Å–æ–≤–æ–µ –æ—á–∏—â–µ–Ω–∏–µ.
    """
    page: int


def get_promo_menu_keyboard():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ —Å —ç–º–æ–¥–∑–∏ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="add_promocode"))
    builder.row(InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="remove_promocode"))
    builder.row(InlineKeyboardButton(text="üéüÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", callback_data="all_promocodes"))
    builder.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="remove_all_promocodes"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu"))
    return builder.as_markup()

async def show_promo_menu(callback: CallbackQuery) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º.
    """
    await callback.message.edit_text(
        "<b>üéüÔ∏è –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_promo_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "add_promocode")
async def add_promocode_start(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ —ç–º–æ–¥–∑–∏.
    """
    await callback.message.answer(
        "<b>‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞.\n\n"
        "<b>–§–æ—Ä–º–∞—Ç:</b> <code>–ö–û–î –î–ù–ò [–ö–û–õ-–í–û]</code>\n\n"
        "‚Ä¢ <code>–ö–û–î</code> ‚Äî —Å–∞–º –ø—Ä–æ–º–æ–∫–æ–¥ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤).\n"
        "‚Ä¢ <code>–î–ù–ò</code> ‚Äî —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö.\n"
        "‚Ä¢ <code>–ö–û–õ-–í–û</code> ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1).\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä 1 (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π):</b> <code>SALE25 30</code>\n"
        "<b>–ü—Ä–∏–º–µ—Ä 2 (–º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π):</b> <code>MULTI 90 100</code>\n\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞–∑–∞–¥</b> –≤ –º–µ–Ω—é.",
        parse_mode="HTML"
    )
    await state.set_state(PromoStates.add)
    await callback.answer()

@router.message(PromoStates.add)
async def process_add_promocode(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –æ—Ç–≤–µ—á–∞–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —Å —ç–º–æ–¥–∑–∏.
    """
    if message.from_user.id not in ADMINS or not message.text:
        await state.clear()
        return

    parts = message.text.strip().split()
    code, days, uses_left = None, None, 1

    if len(parts) == 2 and parts[1].isdigit():
        code, days = parts[0], int(parts[1])
    elif len(parts) == 3 and parts[1].isdigit() and parts[2].isdigit():
        code, days, uses_left = parts[0], int(parts[1]), int(parts[2])

    if code and days:
        async with get_session() as session:
            await add_promocode(session, code, days, uses_left)

        logging.info(
            f"‚ûï [PROMO] –ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥: {code}, "
            f"{days} –¥–Ω., {uses_left} –∏—Å–ø."
        )
        await message.answer(
            f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ <code>{code.upper()}</code> –Ω–∞ {days} –¥–Ω. "
            f"({uses_left} –∞–∫—Ç–∏–≤–∞—Ü–∏–π) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏! üéâ",
            parse_mode="HTML"
        )
        await state.clear()
    else:
        logging.warning(f"‚ùóÔ∏è [PROMO] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç {message.from_user.id}: {message.text}")
        await message.answer(
            "‚ùóÔ∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞.</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ –ø—Ä–∏–º–µ—Ä—É –≤—ã—à–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞–∑–∞–¥</b> –≤ –º–µ–Ω—é.",
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("remove_promocode_page"))
async def remove_promocode_page(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–∞–≥–∏–Ω–∞—Ü–∏—è).
    """
    data = callback.data.split(":")
    page = int(data[1]) if len(data) > 1 and data[1].isdigit() else 1
    async with get_session() as session:
        promocodes = await get_all_promocodes(session)
    total = len(promocodes)
    total_pages = max(1, ceil(total / PROMOCODES_PER_PAGE))
    page = max(1, min(page, total_pages))
    start = (page - 1) * PROMOCODES_PER_PAGE
    end = start + PROMOCODES_PER_PAGE
    page_promocodes = promocodes[start:end]
    builder = InlineKeyboardBuilder()
    for p in page_promocodes:
        builder.button(
            text=f"üéüÔ∏è {p.code} ‚Äî {p.duration_days} –¥–Ω. (–æ—Å—Ç: {p.uses_left})",
            callback_data=f"remove_promo:{p.code}"
        )
    builder.adjust(1)
    nav = pagination_keyboard(page, total_pages, prefix="remove_promocode_page")
    nav_markup = nav.inline_keyboard if isinstance(nav, InlineKeyboardMarkup) else nav
    builder.row(*nav_markup[-1])
    for row in nav_markup[:-1]:
        builder.row(*row)
    await callback.message.edit_text(
        "<b>üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "remove_promocode")
async def remove_promocode_start(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ, —Å —ç–º–æ–¥–∑–∏ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
    """
    async with get_session() as session:
        promocodes = await get_all_promocodes(session)
    if not promocodes:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.</b>\n\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            parse_mode="HTML",
            reply_markup=get_promo_menu_keyboard()
        )
        await callback.answer()
        return
    await remove_promocode_page(callback, state)

@router.callback_query(F.data.startswith("remove_promo:"))
async def remove_promocode_button(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –æ—Ç–≤–µ—á–∞–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.
    """
    code = callback.data.removeprefix("remove_promo:")
    async with get_session() as session:
        await remove_promocode(session, code)
    markup = callback.message.reply_markup
    if markup:
        new_buttons = [row for row in markup.inline_keyboard if not any(code in btn.callback_data for btn in row if btn.callback_data)]
        if len(new_buttons) == 1 and any("–ù–∞–∑–∞–¥" in btn.text for btn in new_buttons[0]):
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.</b>\n\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=new_buttons))

@router.message(PromoStates.remove)
async def process_remove_promocode(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥, –æ—Ç–≤–µ—á–∞–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —Å —ç–º–æ–¥–∑–∏.
    """
    if message.from_user.id not in ADMINS or not message.text:
        await state.clear()
        return

    code = message.text.strip()
    async with get_session() as session:
        success = await remove_promocode(session, code)
        if success:
            logging.info(f"üóëÔ∏è [PROMO] –ê–¥–º–∏–Ω {message.from_user.id} —É–¥–∞–ª–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥: {code}.")
            text = f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ <code>{code.upper()}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!</b>"
        else:
            logging.warning(f"‚ùóÔ∏è [PROMO] –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {code} (–∞–¥–º–∏–Ω {message.from_user.id})")
            text = f"‚ùóÔ∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥ <code>{code.upper()}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>"

    await message.answer(text, parse_mode="HTML")
    await state.clear()

@router.callback_query(F.data.startswith("all_promocodes_page"))
async def show_all_promocodes_page(callback: CallbackQuery) -> None:
    data = callback.data.split(":")
    page = int(data[1]) if len(data) > 1 and data[1].isdigit() else 1
    async with get_session() as session:
        promocodes = await get_all_promocodes(session)
    total = len(promocodes)
    total_pages = max(1, ceil(total / PROMOCODES_PER_PAGE))
    page = max(1, min(page, total_pages))
    start = (page - 1) * PROMOCODES_PER_PAGE
    end = start + PROMOCODES_PER_PAGE
    page_promocodes = promocodes[start:end]
    if page_promocodes:
        text = "<b>üéüÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n\n" + "\n".join(
            [
                f"üéüÔ∏è <code>{p.code}</code> ‚Äî {p.duration_days} –¥–Ω. (–æ—Å—Ç–∞–ª–æ—Å—å: {p.uses_left})"
                for p in page_promocodes
            ]
        )
    else:
        text = "‚ùå <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.</b>\n\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    nav = pagination_keyboard(page, total_pages, prefix="all_promocodes_page", extra_buttons=[("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "promocode_menu_show")])
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=nav)
    await callback.answer()

@router.callback_query(F.data == "all_promocodes")
async def show_all_promocodes(callback: CallbackQuery) -> None:
    await show_all_promocodes_page(callback)

@router.callback_query(F.data == "remove_all_promocodes")
async def ask_remove_all_confirmation(callback: CallbackQuery) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ—Å—Ç—å –∏ —ç–º–æ–¥–∑–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="confirm_remove_all"),
        InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="promocode_menu_show")
    )
    await callback.message.edit_text(
        "<b>‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <u>–∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ</u> –ø—Ä–æ–º–æ–∫–æ–¥—ã?</b>\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b>–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä:",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_remove_all")
async def confirm_remove_all_promocodes(callback: CallbackQuery) -> None:
    """
    –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –∏ —Å–æ–æ–±—â–∞–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.
    """
    async with get_session() as session:
        await remove_all_promocodes(session)
        logging.warning(f"üóëÔ∏è [PROMO] –ê–¥–º–∏–Ω {callback.from_user.id} —É–¥–∞–ª–∏–ª –í–°–ï –ø—Ä–æ–º–æ–∫–æ–¥—ã.")

    await callback.answer("‚úÖ –í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", show_alert=True)
    await show_promo_menu(callback)

@router.callback_query(F.data == "promocode_menu_show")
async def back_to_promo_menu(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥', –≤–æ–∑–≤—Ä–∞—â–∞—è –≤ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.
    """
    await show_promo_menu(callback)
"""–≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü: –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π CSV –ª—é–±–æ–π –º–æ–¥–µ–ª–∏ SQLAlchemy —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é."""

import csv
import io
import logging
from datetime import datetime

from aiogram import F, Router
from aiogram.filters.callback_data import CallbackData
from aiogram.types import BufferedInputFile, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select

# –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ –±—É–¥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ Base.registry
# –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –º—ã –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∏—Ö –ø–æ–ª—É—á–∏—Ç—å.
import db
from db.base import Base, get_session

router = Router()


class TableExportCallback(CallbackData, prefix="export"):
    """–§–∞–±—Ä–∏–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–∞–±–ª–∏—Ü."""
    table_name: str


def get_all_models():
    """
    –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏, —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç Base.
    –†–∞–±–æ—Ç–∞–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–æ–º—É, —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ db/__init__.py.
    """
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∫–Ω–æ–ø–æ–∫
    return sorted(Base.registry.mappers, key=lambda m: m.class_.__tablename__)


def get_table_keyboard() -> InlineKeyboardBuilder:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–∞–±–ª–∏—Ü —Å —ç–º–æ–¥–∑–∏ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏.
    """
    builder = InlineKeyboardBuilder()
    models = get_all_models()

    for mapper in models:
        model_class = mapper.class_
        table_name = model_class.__tablename__
        builder.button(
            text=f"üìÑ {table_name}",
            callback_data=TableExportCallback(table_name=table_name).pack()
        )

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu")
    builder.adjust(2)
    return builder


@router.callback_query(F.data == "export_table_menu")
async def export_table_menu(callback: CallbackQuery) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ —ç–º–æ–¥–∑–∏.
    """
    builder = get_table_keyboard()
    await callback.message.edit_text(
        "<b>üìÑ –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV:",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


def format_value(value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ CSV."""
    if isinstance(value, datetime):
        # –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞—Ç—É –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        return value.astimezone().strftime('%Y-%m-%d %H:%M:%S')
    if value is None:
        return ""
    return str(value)


@router.callback_query(TableExportCallback.filter())
async def export_table_handler(callback: CallbackQuery, callback_data: TableExportCallback) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª—é–±–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç CSV —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º UX –∏ —ç–º–æ–¥–∑–∏.
    """
    table_name = callback_data.table_name
    await callback.answer(f"‚è≥ –ì–æ—Ç–æ–≤–∏–º —ç–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã <b>{table_name}</b>...", show_alert=False)

    try:
        # –ù–∞—Ö–æ–¥–∏–º –º–æ–¥–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã
        model_mapper = next((m for m in get_all_models() if m.class_.__tablename__ == table_name), None)

        if not model_mapper:
            await callback.answer(f"‚ùå <b>–¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>", show_alert=True)
            return

        model_class = model_mapper.class_

        async with get_session() as session:
            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            result = await session.execute(select(model_class))
            rows = result.scalars().all()

            if not rows:
                await callback.message.edit_text(
                    f"‚ÑπÔ∏è <b>–¢–∞–±–ª–∏—Ü–∞ <code>{table_name}</code> –ø—É—Å—Ç–∞.</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                    parse_mode="HTML",
                    reply_markup=callback.message.reply_markup
                )
                await callback.answer()
                return

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ –º–æ–¥–µ–ª–∏
            headers = [c.name for c in model_class.__table__.columns]

        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = io.StringIO()
        writer = csv.writer(output, delimiter=';', quotechar='"', quoting=csv.QUOTE_MINIMAL)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow(headers)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        for row_obj in rows:
            writer.writerow([format_value(getattr(row_obj, h)) for h in headers])

        output.seek(0)
        csv_data = output.getvalue().encode('utf-8')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        file = BufferedInputFile(csv_data, filename=f"{table_name}.csv")
        await callback.message.answer_document(
            file,
            caption=f"üìÑ <b>–≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã:</b> <code>{table_name}.csv</code>",
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=False)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}", exc_info=True)
        await callback.answer(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–∞–±–ª–∏—Ü—ã <code>{table_name}</code>.</b>\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.",
            show_alert=True
        )

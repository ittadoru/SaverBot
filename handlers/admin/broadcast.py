from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from states.broadcast import Broadcast
from utils.redis import r
from config import ADMINS
from utils import logger as log

router = Router()


@router.callback_query(F.data == "broadcast_start")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    if callback.from_user.id not in ADMINS:
        await callback.message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ.")
        return await callback.answer()

    await callback.message.answer("‚úâÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await state.set_state(Broadcast.waiting_for_message)
    await callback.answer()


@router.message(Broadcast.waiting_for_message)
async def handle_broadcast(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ Redis."""
    current_state = await state.get_state()
    if current_state != Broadcast.waiting_for_message.state:
        return  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    user_ids = await r.smembers("users")
    sent = 0

    log.log_message(
        f"–ù–∞—á–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞: {message.text or '[–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'}",
        emoji="üì¢"
    )

    for uid in user_ids:
        try:
            await message.send_copy(int(uid))
            sent += 1
        except Exception as e:
            log.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

    log.log_message(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        emoji="üì¨"
    )

    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()


@router.callback_query(lambda c: c.data == "admin_menu")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ."""
    await state.clear()
    await callback.message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from states.broadcast import Broadcast
from redis_db import r
from config import ADMIN_ERROR
from utils import logger as log

router = Router()


@router.callback_query(F.data == "broadcast_start")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    await callback.message.answer("‚úâÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await state.set_state(Broadcast.waiting_for_message)
    await callback.answer()



# –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(Broadcast.waiting_for_message)
async def handle_broadcast(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != Broadcast.waiting_for_message.state:
        return
    await state.update_data(broadcast_text=message.text)
    await message.answer("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –ø–æ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(Broadcast.waiting_button_choice)

# –®–∞–≥ 2: –£–∑–Ω–∞—ë–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
@router.message(Broadcast.waiting_button_choice)
async def process_button_choice(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text.lower() == "–¥–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:")
        await state.set_state(Broadcast.waiting_button_text)
    else:
        await send_broadcast(message, data["broadcast_text"])
        await state.clear()

# –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
@router.message(Broadcast.waiting_button_text)
async def process_button_text(message: Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
    await state.set_state(Broadcast.waiting_button_url)

# –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É

@router.message(Broadcast.waiting_button_url)
async def process_button_url(message: Message, state: FSMContext):
    data = await state.get_data()
    button_text = data["button_text"]
    button_url = message.text.strip()
    text = data["broadcast_text"]
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    if not (button_url.startswith("http://") or button_url.startswith("https://")):
        await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://")
        return
    markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=button_text, url=button_url)]]
    )
    try:
        await send_broadcast(message, text, markup)
    except Exception as e:
        await message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def send_broadcast(message: Message, text: str, markup: InlineKeyboardMarkup = None):
    user_ids = await r.smembers("users")
    sent = 0

    log.log_message(
        f"–ù–∞—á–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞: {text or '[–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'}",
        emoji="üì¢"
    )

    for uid in user_ids:
        try:
            await message.bot.send_message(int(uid), text, reply_markup=markup)
            sent += 1
        except Exception as e:
            # –õ–æ–≤–∏–º TelegramBadRequest –∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            await message.bot.send_message(
                ADMIN_ERROR, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}"
            )
            log.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

    log.log_message(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        emoji="üì¨"
    )

    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


@router.callback_query(lambda c: c.data == "admin_menu")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ."""
    await state.clear()
    log.log_message("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", emoji="‚ùå")
    await callback.message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

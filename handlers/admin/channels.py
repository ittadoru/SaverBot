"""–ê–¥–º–∏–Ω: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–±—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º."""
from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from sqlalchemy.exc import ProgrammingError
from states.channels import ChannelStates
from aiogram.fsm.context import FSMContext

from config import ADMINS
from db.base import get_session
from db.channels import (
    list_channels,
    add_channel,
    delete_channel,
    toggle_channel_active,
    toggle_channel_required,
    is_channel_guard_enabled,
    toggle_channel_guard,
)

router = Router()
router.message.filter(F.from_user.id.in_(ADMINS))
router.callback_query.filter(F.from_user.id.in_(ADMINS))


async def _channels_menu_text(session) -> str:
    enabled = await is_channel_guard_enabled(session)
    channels = await list_channels(session)
    lines = [f"üåê –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {'ON' if enabled else 'OFF'}", "", "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:"]
    if not channels:
        lines.append("‚Äî –ø–æ–∫–∞ –ø—É—Å—Ç–æ")
    else:
        for ch in channels:
            lines.append(
                f"#{ch.id} @%s | %s | req=%s act=%s" % (
                    ch.username,
                    ch.title or '-',
                    '‚úÖ' if ch.is_required else '‚ùå',
                    '‚úÖ' if ch.active else '‚ùå'
                )
            )
    return '\n'.join(lines)


def _channels_menu_kb(channels, guard_on: bool):
    b = InlineKeyboardBuilder()
    for ch in channels:
        b.row(
            InlineKeyboardButton(text=f"@{ch.username}", callback_data=f"noop"),
            InlineKeyboardButton(text=("ON" if ch.active else "OFF"), callback_data=f"ch_toggle_act:{ch.id}"),
            InlineKeyboardButton(text="‚úñ", callback_data=f"ch_del:{ch.id}"),
        )
    b.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="ch_add_start"))
    b.row(InlineKeyboardButton(text=("üåê –í—ã–∫–ª" if guard_on else "üåê –í–∫–ª"), callback_data="ch_toggle_guard"))
    b.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu"))
    return b.as_markup()


@router.callback_query(F.data == "channels_menu")
async def show_channels_menu(callback: CallbackQuery):
    try:
        async with get_session() as session:
            channels = await list_channels(session)
            text = await _channels_menu_text(session)
            guard_on = await is_channel_guard_enabled(session)
        await callback.message.edit_text(text, reply_markup=_channels_menu_kb(channels, guard_on))
    except ProgrammingError:
        await callback.message.edit_text(
            "–¢–∞–±–ª–∏—Ü—ã –∫–∞–Ω–∞–ª–æ–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ (alembic upgrade head) –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä app."
        )
    await callback.answer()


# --- Toggle handlers ---
@router.callback_query(F.data.startswith("ch_toggle_req:"))
async def toggle_required(callback: CallbackQuery):
    ch_id = int(callback.data.split(":", 1)[1])
    async with get_session() as session:
        await toggle_channel_required(session, ch_id)
        channels = await list_channels(session)
        text = await _channels_menu_text(session)
        guard_on = await is_channel_guard_enabled(session)
    await callback.message.edit_text(text, reply_markup=_channels_menu_kb(channels, guard_on))
    await callback.answer()


@router.callback_query(F.data.startswith("ch_toggle_act:"))
async def toggle_active(callback: CallbackQuery):
    ch_id = int(callback.data.split(":", 1)[1])
    async with get_session() as session:
        await toggle_channel_active(session, ch_id)
        channels = await list_channels(session)
        text = await _channels_menu_text(session)
        guard_on = await is_channel_guard_enabled(session)
    await callback.message.edit_text(text, reply_markup=_channels_menu_kb(channels, guard_on))
    await callback.answer()


@router.callback_query(F.data.startswith("ch_del:"))
async def delete_ch(callback: CallbackQuery):
    ch_id = int(callback.data.split(":", 1)[1])
    async with get_session() as session:
        await delete_channel(session, ch_id)
        channels = await list_channels(session)
        text = await _channels_menu_text(session)
        guard_on = await is_channel_guard_enabled(session)
    await callback.message.edit_text(text, reply_markup=_channels_menu_kb(channels, guard_on))
    await callback.answer()


@router.callback_query(F.data == "ch_toggle_guard")
async def toggle_guard(callback: CallbackQuery):
    async with get_session() as session:
        await toggle_channel_guard(session)
        channels = await list_channels(session)
        text = await _channels_menu_text(session)
        guard_on = await is_channel_guard_enabled(session)
    await callback.message.edit_text(text, reply_markup=_channels_menu_kb(channels, guard_on))
    await callback.answer()


# --- Add channel flow ---

@router.callback_query(F.data == "ch_add_start")
async def add_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞ (–ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–≥–æ ‚Äî –ø–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ @username):\n‚¨ÖÔ∏è /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    await state.set_state(ChannelStates.waiting_for_username)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@router.message(ChannelStates.waiting_for_username)
async def process_channel_username(message: Message, state: FSMContext):
    username = message.text.strip().lstrip("@")
    if not username.isalnum():
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    async with get_session() as session:
        try:
            await add_channel(session, username)
            await message.answer(f"–ö–∞–Ω–∞–ª @{username} –¥–æ–±–∞–≤–ª–µ–Ω.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
    await state.clear()

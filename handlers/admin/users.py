"""–ê–¥–º–∏–Ω: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∏ (–º–∞—Å—Å–æ–≤–æ–µ) —É–¥–∞–ª–µ–Ω–∏–µ."""

import logging
from math import ceil

from aiogram import F, Router, types
from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from config import ADMINS
from db.base import get_session
from db.subscribers import is_subscriber
from db.users import (delete_user_by_id, get_all_user_ids, get_total_users,
                    get_users_by_ids)

logger = logging.getLogger(__name__)

router = Router()
router.message.filter(F.from_user.id.in_(ADMINS))
router.callback_query.filter(F.from_user.id.in_(ADMINS))

USERS_PER_PAGE = 10


class UsersPageCallback(CallbackData, prefix="users_page"):
    """–§–∞–±—Ä–∏–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    page: int


class ConfirmDeleteAllCallback(CallbackData, prefix="confirm_delete_all"):
    """–§–∞–±—Ä–∏–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    confirm: bool


async def _get_users_page_markup(session: AsyncSession, page: int = 1) -> tuple[str, InlineKeyboardBuilder]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –≤–µ—Ä—Å–∏—è.
    """
    total_users = await get_total_users(session)
    total_pages = max(1, ceil(total_users / USERS_PER_PAGE))
    offset = (page - 1) * USERS_PER_PAGE

    user_ids = await get_all_user_ids(session, limit=USERS_PER_PAGE, offset=offset)
    users = await get_users_by_ids(session, user_ids)

    if not users:
        text = "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.</b>"
    else:
        text = "<b>üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        for user in users:
            is_sub = await is_subscriber(session, user.id)
            status_icon = "üíé" if is_sub else "‚ùå"
            username = f" (@{user.username})" if user.username else ""
            text += f"{status_icon} <code>{user.id}</code> ‚Äî {user.first_name}{username}\n"

    builder = InlineKeyboardBuilder()
    nav_buttons = []
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=UsersPageCallback(page=page - 1).pack()))
    nav_buttons.append(types.InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop"))
    if page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=UsersPageCallback(page=page + 1).pack()))
    if nav_buttons:
        builder.row(*nav_buttons)
    builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="manage_users"))
    return text, builder


@router.callback_query(F.data == "all_users")
async def list_users_handler(callback: types.CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
    """
    async with get_session() as session:
        text, builder = await _get_users_page_markup(session, page=1)
        await callback.message.edit_text(
            text, parse_mode="HTML", reply_markup=builder.as_markup()
        )
    logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", callback.from_user.id)
    await callback.answer()


@router.callback_query(UsersPageCallback.filter())
async def paginate_users_handler(callback: types.CallbackQuery, callback_data: UsersPageCallback) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    page = callback_data.page
    async with get_session() as session:
        text, builder = await _get_users_page_markup(session, page)
        await callback.message.edit_text(
            text, parse_mode="HTML", reply_markup=builder.as_markup()
        )
    logger.info(
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ %d.",
        callback.from_user.id,
        page,
    )
    await callback.answer()


@router.callback_query(F.data == "delete_all_users")
async def confirm_delete_all_users_handler(callback: types.CallbackQuery) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ —ç–º–æ–¥–∑–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö!",
        callback_data=ConfirmDeleteAllCallback(confirm=True).pack(),
    )
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=ConfirmDeleteAllCallback(confirm=False).pack()
    )
    builder.adjust(1)
    await callback.message.edit_text(
        "<b>‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <u>–í–°–ï–•</u> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?</b>\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b>–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</b> –∏ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –ø–æ–ª–Ω–æ–π –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö.",
        parse_mode="HTML",
        reply_markup=builder.as_markup(),
    )
    await callback.answer()


@router.callback_query(ConfirmDeleteAllCallback.filter())
async def delete_all_users_handler(callback: types.CallbackQuery, callback_data: ConfirmDeleteAllCallback) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —Å —ç–º–æ–¥–∑–∏.
    """
    if not callback_data.confirm:
        await callback.message.edit_text("‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>", parse_mode="HTML")
        await list_users_handler(callback)
        return

    async with get_session() as session:
        user_ids = await get_all_user_ids(session)
        for uid in user_ids:
            await delete_user_by_id(session, uid)

    logger.warning(
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d —É–¥–∞–ª–∏–ª –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", callback.from_user.id
    )
    await callback.answer("‚úÖ <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!</b>", show_alert=True)
    await callback.message.delete()

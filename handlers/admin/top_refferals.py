"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã: —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.
–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥".
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

import logging
from db.base import get_session
from db.users import get_top_referrers


logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(F.data == "top_referrals")
async def admin_top_referrals(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥".
    """
    admin_id = callback.from_user.id
    try:
        async with get_session() as session:
            top = await get_top_referrers(session, limit=10)
        markup = InlineKeyboardBuilder()
        markup.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_users")
        markup.adjust(1)

        if not top:
            text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º."
        else:
            text = "<b>üèÜ –¢–æ–ø-10 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:</b>\n\n"
            medals = ["ü•á", "ü•à", "ü•â"] + ["üèÖ"] * 7
            for i, u in enumerate(top, 1):
                medal = medals[i - 1] if i <= len(medals) else "üèÖ"
                uname = f"<b>@{u.username}</b>" if u.username else f"<code>{u.id}</code>"
                text += (
                    f"{medal} {uname} ‚Äî <b>{u.ref_count}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ | "
                    f"—É—Ä–æ–≤–µ–Ω—å <b>{u.level}</b>\n"
                )

        try:
            await callback.message.edit_text(
                text,
                parse_mode="HTML",
                reply_markup=markup.as_markup()
            )
        except Exception as e:
            await callback.answer()
            return

        await callback.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–ø–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (user_id=%d): %s", admin_id, e)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ç–æ–ø–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.", show_alert=True)
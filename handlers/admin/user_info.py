"""–ê–¥–º–∏–Ω: –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID/username –∏ –ø–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏."""

import logging
from datetime import datetime, timezone, timedelta
import html
from typing import Optional

from aiogram import Bot, F, Router, types
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import ADMINS
from db import subscribers as db_subscribers
from db import users as db_users
from db import downloads as db_downloads
from db.base import get_session
from db.users import User
from states.history import HistoryStates


logger = logging.getLogger(__name__)

router = Router()
router.message.filter(F.from_user.id.in_(ADMINS))
router.callback_query.filter(F.from_user.id.in_(ADMINS))


class UserCallback(CallbackData, prefix="user_admin"):
    """–§–∞–±—Ä–∏–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    action: str
    user_id: int


@router.callback_query(F.data == "user_history_start")
async def show_user_history_prompt(
    callback: types.CallbackQuery, state: FSMContext
) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID –∏–ª–∏ username –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    await state.set_state(HistoryStates.waiting_for_id_or_username)
    await state.update_data(message_to_edit=callback.message.message_id)

    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_users")

    await callback.message.edit_text(
        "<b>üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>ID</b> –∏–ª–∏ <b>username</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥'.</i>",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.message(HistoryStates.waiting_for_id_or_username)
async def process_user_lookup(message: types.Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID/username, –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º.
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ, –ø—Ä–µ–≤—Ä–∞—â–∞—è –µ–≥–æ –≤ –∏–Ω—Ñ–æ-–∫–∞—Ä—Ç–æ—á–∫—É.
    """
    data = await state.get_data()
    message_id_to_edit: Optional[int] = data.get("message_to_edit")
    await state.clear()

    user_identifier = message.text.strip()
    user: Optional[User] = None

    await message.delete()

    async with get_session() as session:
        if user_identifier.isdigit():
            user = await db_users.get_user_by_id(session, int(user_identifier))
        else:
            username = user_identifier.lstrip("@").lower()
            user = await db_users.get_user_by_username(session, username)

        if not user:
            builder = InlineKeyboardBuilder()
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_users")
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message_id_to_edit,
                text="‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID –∏–ª–∏ username.",
                parse_mode="HTML",
                reply_markup=builder.as_markup(),
            )
            return

        expiry_date = await db_subscribers.get_subscriber_expiry(session, user.id)
        now_utc = datetime.now(timezone.utc)
        if expiry_date and expiry_date.tzinfo is None:
            expiry_date = expiry_date.replace(tzinfo=timezone.utc)

        if expiry_date and expiry_date > now_utc:
            subscription_status = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{expiry_date.strftime('%d.%m.%Y %H:%M')}</b> UTC"
        else:
            subscription_status = "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Å—ã–ª–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏—è
        last_links = await db_downloads.get_last_links(session, user.id, limit=3, include_time=True)
        if last_links:
            # –§–æ—Ä–º–∞—Ç: —Å—Å—ã–ª–∫–∞\nDD.MM.YYYY HH:MM MSK ‚Äî <relative>\n\n
            msk = timezone(timedelta(hours=3))
            now_msk = datetime.now(timezone.utc).astimezone(msk)

            def _human_delta(seconds: int) -> str:
                if seconds < 60:
                    return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
                minutes = seconds // 60
                if minutes < 60:
                    return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
                hours = minutes // 60
                if hours < 24:
                    return f"{hours} —á. –Ω–∞–∑–∞–¥"
                days = hours // 24
                if days < 30:
                    return f"{days} –¥–Ω. –Ω–∞–∑–∞–¥"
                months = days // 30
                if months < 12:
                    return f"{months} –º–µ—Å. –Ω–∞–∑–∞–¥"
                years = months // 12
                return f"{years} –≥. –Ω–∞–∑–∞–¥"

            parts: list[str] = []
            for url, created_at in last_links:
                if created_at.tzinfo is None:
                    created_at = created_at.replace(tzinfo=timezone.utc)
                created_msk = created_at.astimezone(msk)
                time_str = created_msk.strftime('%d.%m.%Y %H:%M') + ' MSK'
                rel = _human_delta(int((now_msk - created_msk).total_seconds()))
                url_esc = html.escape(url, quote=True)
                parts.append(f"<a href=\"{url_esc}\">{url_esc}</a>\n<code>{time_str} ‚Äî {rel}</code>\n")

            links_block = "\n".join(parts)
        else:
            links_block = "(–Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å—Å—ã–ª–æ–∫)"

        user_info_text = (
            f"<b>üë§ –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"<b>ID:</b> <code>{user.id}</code>\n"
            f"<b>–ò–º—è:</b> {user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>Username:</b> {f'@{user.username}' if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_status}\n\n"
            f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Å—ã–ª–∫–∏:</b>\n<pre>{links_block}</pre>"
        )

    builder = InlineKeyboardBuilder()
    builder.button(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        callback_data=UserCallback(action="delete", user_id=user.id).pack(),
    )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="manage_users")
    builder.adjust(1)

    await bot.edit_message_text(
        text=user_info_text,
        chat_id=message.chat.id,
        message_id=message_id_to_edit,
        parse_mode="HTML",
        reply_markup=builder.as_markup(),
    )

@router.callback_query(UserCallback.filter(F.action == "delete"))
async def delete_user_handler(
    callback: types.CallbackQuery, callback_data: UserCallback
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    """
    user_id_to_delete = callback_data.user_id
    admin_id = callback.from_user.id

    async with get_session() as session:
        success = await db_users.delete_user_by_id(session, user_id_to_delete)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    builder = InlineKeyboardBuilder()
    builder.button(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="all_users")
    builder.button(
        text="üîç –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="user_history_start"
    )
    builder.button(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="delete_all_users"
    )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
    builder.adjust(1)

    if success:
        logger.info(
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", admin_id, user_id_to_delete
        )
        text = f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id_to_delete}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        logger.warning(
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d –Ω–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d",
            admin_id,
            user_id_to_delete,
        )
        text = f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id_to_delete}</code>.</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await callback.message.edit_text(
        text=text, reply_markup=builder.as_markup(), parse_mode="HTML"
    )
    await callback.answer()

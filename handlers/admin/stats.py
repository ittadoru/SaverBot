# handlers/admin/stats.py

from aiogram import Router, types, F
from aiogram.types import CallbackQuery
from redis.exceptions import RedisError
import datetime
from utils import logger as log
from config import ADMIN_ERROR
from utils.redis import r

router = Router()

@router.callback_query(lambda c: c.data == "stats")
async def handle_stats(callback: CallbackQuery):
    try:
        total_downloads = await r.get("downloads:total") or 0
        yt_downloads = await r.get("downloads:youtube") or 0
        insta_downloads = await r.get("downloads:instagram") or 0
        tiktok_downloads = await r.get("downloads:tiktok") or 0

        total_users = await r.scard("users")
        today_key = f"active_users:{datetime.date.today()}"
        active_users_today = await r.pfcount(today_key)
        total_subscribers = len(await r.smembers("subscribers"))

        msg = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
            f"üíé –° –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>{total_subscribers}</b>\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <b>{active_users_today}</b>\n"
            f"üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: <b>{total_downloads}</b>\n\n"
            f"‚Ä¢ YouTube: {yt_downloads}\n"
            f"‚Ä¢ Instagram: {insta_downloads}\n"
            f"‚Ä¢ TikTok: {tiktok_downloads}"
        )

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ]
        )
        await callback.message.edit_text(msg, parse_mode="HTML", reply_markup=keyboard)
        await callback.answer()

    except Exception as e:
        import traceback
        error_text = f"–û—à–∏–±–∫–∞: {e}"
        full_trace = traceback.format_exc()
        log.log_error(error_text)
        log.log_error(full_trace)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π ID)
        try:
            await callback.message.bot.send_message(
                ADMIN_ERROR,
                f"‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n<pre>{error_text}</pre>\n<pre>{full_trace}</pre>",
                parse_mode="HTML"
            )
        except Exception as send_err:
            log.log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É: {send_err}")


@router.callback_query(lambda c: c.data == "top_week")
async def handle_top_week(callback: CallbackQuery):
    try:
        user_ids = await r.smembers("users")
        users_with_counts = []

        for uid in user_ids:
            count = await r.get(f"user:{uid}:downloads")
            if count:
                users_with_counts.append((uid, int(count)))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
        top = sorted(users_with_counts, key=lambda x: x[1], reverse=True)[:10]

        if not top:
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ]
            )
            await callback.message.edit_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø–∞.", reply_markup=keyboard)
            return await callback.answer()

        msg = "üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 7 –¥–Ω–µ–π:</b>\n\n"
        for i, (uid, count) in enumerate(top, start=1):
            user_data = await r.hgetall(f"user:{uid}")
            username = user_data.get("username")
            name = user_data.get("first_name", "")
            line = f"{i}. {name}"
            if username:
                line += f" (@{username})"
            line += f" ‚Äî {count} –∑–∞–≥—Ä—É–∑–æ–∫"
            msg += line + "\n"

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ]
        )
        await callback.message.edit_text(msg, parse_mode="HTML", reply_markup=keyboard)
        await callback.answer()

    except RedisError:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞.")
        await callback.answer()


@router.callback_query(lambda c: c.data == "top_all")
async def handle_top_all(callback: CallbackQuery):
    try:
        user_ids = await r.smembers("users")
        users_with_counts = []

        for uid in user_ids:
            count = await r.get(f"user:{uid}:downloads")
            if count:
                users_with_counts.append((uid, int(count)))

        top = sorted(users_with_counts, key=lambda x: x[1], reverse=True)[:10]

        if not top:
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ]
            )
            await callback.message.edit_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø–∞.", reply_markup=keyboard)
            return await callback.answer()

        msg = "üèÖ <b>–¢–æ–ø –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b>\n\n"
        for i, (uid, count) in enumerate(top, start=1):
            user_data = await r.hgetall(f"user:{uid}")
            username = user_data.get("username")
            name = user_data.get("first_name", "")
            line = f"{i}. {name}"
            if username:
                line += f" (@{username})"
            line += f" ‚Äî {count} –∑–∞–≥—Ä—É–∑–æ–∫"
            msg += line + "\n"

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ]
        )
        await callback.message.edit_text(msg, parse_mode="HTML", reply_markup=keyboard)
        await callback.answer()

    except RedisError:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞.")
        await callback.answer()

"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞: –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""

import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton

from db.base import get_session
from db.promocodes import get_active_promocodes_count
from db.subscribers import (get_subscriptions_count_for_period,
                            get_total_subscribers)
from db.users import (get_active_users_today,
                      get_new_users_count_for_period, get_total_users)

router = Router()


@router.callback_query(F.data == "stats")
async def handle_stats(callback: CallbackQuery):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç—É.
    """
    try:
        async with get_session() as session:
            # --- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
            total_users = await get_total_users(session)
            total_subscribers = await get_total_subscribers(session)
            active_promos = await get_active_promocodes_count(session)

            # --- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
            active_today = await get_active_users_today(session)
            new_today = await get_new_users_count_for_period(session, days=1)
            new_week = await get_new_users_count_for_period(session, days=7)
            new_month = await get_new_users_count_for_period(session, days=30)

            # --- –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ---
            subs_today = await get_subscriptions_count_for_period(session, days=1)
            subs_week = await get_subscriptions_count_for_period(session, days=7)
            subs_month = await get_subscriptions_count_for_period(session, days=30)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await callback.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.",
            show_alert=True
        )
        return

    # --- –†–∞—Å—á–µ—Ç—ã ---
    sub_percentage = (total_subscribers / total_users * 100) if total_users > 0 else 0

    # --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
    text = (
        f"üìä <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"<b><u>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</u></b>\n"
        f"  üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"  üíé –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>{total_subscribers}</b> ({sub_percentage:.2f}%)\n"
        f"  üéü –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: <b>{active_promos}</b>\n\n"
        f"<b><u>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</u></b>\n"
        f"  üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <b>{active_today}</b>\n"
        f"  ‚ûï –ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞: <b>{new_today}</b>\n"
        f"  ‚ûï –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: <b>{new_week}</b>\n"
        f"  ‚ûï –ù–æ–≤—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: <b>{new_month}</b>\n\n"
        f"<b><u>–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–Ω–æ–≤—ã—Ö/–ø—Ä–æ–¥–ª–µ–Ω–∏–π):</u></b>\n"
        f"  üìà –ó–∞ 24 —á–∞—Å–∞: <b>{subs_today}</b>\n"
        f"  üìà –ó–∞ 7 –¥–Ω–µ–π: <b>{subs_week}</b>\n"
        f"  üìà –ó–∞ 30 –¥–Ω–µ–π: <b>{subs_month}</b>\n"
    )

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu"))

    logging.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await callback.answer()

from aiogram import Router, types
from aiogram.types import CallbackQuery
from redis.exceptions import RedisError
import datetime

from utils import logger as log
from config import ADMIN_ERROR
from redis_db import r

router = Router()


@router.callback_query(lambda c: c.data == "stats")
async def handle_stats(callback: CallbackQuery):
    try:
        total_downloads = await r.get("downloads:total") or 0
        yt_downloads = await r.get("downloads:youtube") or 0
        insta_downloads = await r.get("downloads:instagram") or 0
        tiktok_downloads = await r.get("downloads:tiktok") or 0

        total_users = await r.scard("users")
        today_key = f"active_users:{datetime.date.today()}"
        active_users_today = await r.pfcount(today_key)
        total_subscribers = len(await r.smembers("subscribers"))
    except Exception as e:
        log.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        await callback.message.bot.send_message(ADMIN_ERROR, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return await callback.answer()

    msg = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"üíé –° –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>{total_subscribers}</b>\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <b>{active_users_today}</b>\n"
        f"üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: <b>{total_downloads}</b>\n\n"
        f"‚Ä¢ YouTube: {yt_downloads}\n"
        f"‚Ä¢ Instagram: {insta_downloads}\n"
        f"‚Ä¢ TikTok: {tiktok_downloads}"
    )

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
    )
    log.log_message("–ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", emoji="üìä")
    await callback.message.edit_text(msg, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


async def _get_top_users():
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º."""
    user_ids = await r.smembers("users")
    users_with_counts = []

    for uid in user_ids:
        count = await r.get(f"user:{uid}:downloads")
        if count:
            users_with_counts.append((uid, int(count)))

    return sorted(users_with_counts, key=lambda x: x[1], reverse=True)[:10]


async def _format_top_message(top, title):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if not top:
        return None

    msg = f"{title}\n\n"
    for i, (uid, count) in enumerate(top, start=1):
        user_data = await r.hgetall(f"user:{uid}")
        username = user_data.get("username")
        name = user_data.get("first_name", "")
        line = f"{i}. {name}"
        if username:
            line += f" (@{username})"
        line += f" ‚Äî {count} –∑–∞–≥—Ä—É–∑–æ–∫"
        msg += line + "\n"
    return msg


@router.callback_query(lambda c: c.data == "top_week")
async def handle_top_week(callback: CallbackQuery):
    try:
        top = await _get_top_users()
        msg = await _format_top_message(top, "üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 7 –¥–Ω–µ–π:</b>")

        if not msg:
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ]
            )
            log.log_message("–ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 7 –¥–Ω–µ–π, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç", emoji="‚úñÔ∏è")
            await callback.message.edit_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø–∞.", reply_markup=keyboard)
            return await callback.answer()

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ]
        )

        await callback.message.edit_text(msg, parse_mode="HTML", reply_markup=keyboard)
        log.log_message("–ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 7 –¥–Ω–µ–π", emoji="üèÜ")
        await callback.answer()

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞.")
        log.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")
        await callback.message.bot.send_message(ADMIN_ERROR, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")
        return await callback.answer()


@router.callback_query(lambda c: c.data == "top_all")
async def handle_top_all(callback: CallbackQuery):
    try:
        top = await _get_top_users()
        msg = await _format_top_message(top, "üèÖ <b>–¢–æ–ø –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b>")

        if not msg:
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ]
            )
            log.log_message("–ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç", emoji="‚úñÔ∏è")
            await callback.message.edit_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø–∞.", reply_markup=keyboard)
            return await callback.answer()

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ]
        )

        await callback.message.edit_text(msg, parse_mode="HTML", reply_markup=keyboard)
        log.log_message("–ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è", emoji="üèÖ")
        await callback.answer()

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞.")
        log.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")
        await callback.message.bot.send_message(ADMIN_ERROR, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")
        return await callback.answer()
"""–ü–æ–¥–ø–∏—Å–∫–∞: –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É."""
import logging
from contextlib import suppress

from aiogram import F, Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramAPIError

from db.base import get_session
from db.tariff import get_all_tariffs, get_tariff_by_id
from utils.payment import create_payment


logger = logging.getLogger(__name__)

router = Router()

BUY_PREFIX = "buy_tariff:"
PARSE_MODE = "HTML"
SUBSCRIBE_HEADER = (
    "<b>üíé –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
    "‚Ä¢ 50 —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤ —Å—É—Ç–∫–∏\n"
    "‚Ä¢ –õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –≤ 7 —Ä–∞–∑ –≤—ã—à–µ\n"
    "‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∂–∏–≤—É—Ç –¥–æ–ª—å—à–µ\n"
    "‚Ä¢ –ù–µ—Ç —Ä–µ–∫–ª–∞–º—ã\n"
    "‚Ä¢ –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã\n"
    "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –ª—é–±–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ YouTube –∏ –∞—É–¥–∏–æ\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:"
)

def _build_tariffs_keyboard(tariffs) -> types.InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–∞—Ä–∏—Ñ–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥."""
    builder = InlineKeyboardBuilder()
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ —Ü–µ–Ω–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    for t in sorted(tariffs, key=lambda x: x.price):
        builder.button(
            text=f"{t.name} ‚Äî {t.price} RUB",
            callback_data=f"{BUY_PREFIX}{t.id}"
        )
    builder.button(text="‚¨ÖÔ∏è –í –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    builder.adjust(1)
    return builder.as_markup()



@router.callback_query(F.data == "subscribe")
async def subscribe_handler_callback(callback: types.CallbackQuery) -> None:
    await _show_subscribe_menu(callback.message, callback)

@router.message(F.text == "/subscribe")
async def subscribe_handler_command(message: types.Message) -> None:
    await _show_subscribe_menu(message, is_command=True)

async def _show_subscribe_menu(message: types.Message, callback: types.CallbackQuery = None, is_command=False) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏."""
    async with get_session() as session:
        tariffs = await get_all_tariffs(session)

    if not tariffs:
        with suppress(TelegramAPIError):
            await message.answer(
                "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.",
                parse_mode=PARSE_MODE,
            )
        if callback:
            await callback.answer()
        return

    new_text = SUBSCRIBE_HEADER
    if is_command:
        send = message.answer
    else:
        send = message.edit_text
    with suppress(TelegramAPIError):
        await send(
            new_text,
            reply_markup=_build_tariffs_keyboard(tariffs),
            parse_mode=PARSE_MODE,
        )
    if callback:
        await callback.answer()


@router.callback_query(F.data.startswith(BUY_PREFIX))
async def payment_callback_handler(callback: types.CallbackQuery) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂ –∏ –≤—ã–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞."""
    user_id = callback.from_user.id
    raw = callback.data or ""
    try:
        tariff_id = int(raw.removeprefix(BUY_PREFIX))
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.", show_alert=True)
        return

    async with get_session() as session:
        tariff = await get_tariff_by_id(session, tariff_id)
    if not tariff:
        await callback.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    try:
        me = await callback.bot.get_me()
        payment_url, payment_id = create_payment(
            user_id=user_id,
            amount=tariff.price,
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞: {tariff.name}",
            bot_username=me.username or "bot",
            metadata={
                "user_id": str(user_id),
                "tariff_id": str(tariff.id)
            }
        )
        logger.info(
            "üí∏ [SUBSCRIBE] –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç—ë–∂ %s –¥–ª—è user=%s tariff=%s price=%s", payment_id, user_id, tariff.id, tariff.price
        )
    except Exception as e:
        logger.exception("‚ùå [SUBSCRIBE] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user=%s tariff=%s", user_id, tariff_id)
        await callback.message.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    markup = InlineKeyboardBuilder()
    markup.button(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)
    markup.adjust(1)

    with suppress(TelegramAPIError):
        await callback.message.edit_text(
            f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ <b>{tariff.name}</b> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã",
            parse_mode=PARSE_MODE,
            reply_markup=markup.as_markup(),
        )
    await callback.answer()

from config import SUPPORT_GROUP_ID, SUBSCRIBE_TOPIC_ID
"""–ü–æ–¥–ø–∏—Å–∫–∞: –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É."""
import logging
from contextlib import suppress

from aiogram import F, Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramAPIError


from db.base import get_session
from db.tariff import get_all_tariffs, get_tariff_by_id
from db.subscribers import add_subscriber_with_duration
import uuid


logger = logging.getLogger(__name__)

router = Router()

BUY_PREFIX = "buy_tariff:"
PARSE_MODE = "HTML"
SUBSCRIBE_HEADER = (
    "<b>üíé –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
    "‚Ä¢ 50 —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤ —Å—É—Ç–∫–∏\n"
    "‚Ä¢ –õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –≤ 7 —Ä–∞–∑ –≤—ã—à–µ\n"
    "‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∂–∏–≤—É—Ç –¥–æ–ª—å—à–µ\n"
    "‚Ä¢ –ù–µ—Ç —Ä–µ–∫–ª–∞–º—ã\n"
    "‚Ä¢ –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã\n"
    "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –ª—é–±–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ YouTube –∏ –∞—É–¥–∏–æ\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:"
)

def _build_tariffs_keyboard(tariffs) -> types.InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–∞—Ä–∏—Ñ–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥."""
    builder = InlineKeyboardBuilder()
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ —Ü–µ–Ω–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    for t in sorted(tariffs, key=lambda x: x.price):
        builder.button(
            text=f"{t.name} ‚Äî {t.price} ‚≠êÔ∏è",
            callback_data=f"{BUY_PREFIX}{t.id}"
        )
    builder.button(text="‚¨ÖÔ∏è –í –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    builder.adjust(1)
    return builder.as_markup()



@router.callback_query(F.data == "subscribe")
async def subscribe_handler_callback(callback: types.CallbackQuery) -> None:
    await _show_subscribe_menu(callback.message, callback)

@router.message(F.text == "/subscribe")
async def subscribe_handler_command(message: types.Message) -> None:
    await _show_subscribe_menu(message, is_command=True)

async def _show_subscribe_menu(message: types.Message, callback: types.CallbackQuery = None, is_command=False) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏."""
    async with get_session() as session:
        tariffs = await get_all_tariffs(session)

    if not tariffs:
        with suppress(TelegramAPIError):
            await message.answer(
                "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.",
                parse_mode=PARSE_MODE,
            )
        if callback:
            await callback.answer()
        return

    new_text = SUBSCRIBE_HEADER
    if is_command:
        send = message.answer
    else:
        send = message.edit_text
    with suppress(TelegramAPIError):
        await send(
            new_text,
            reply_markup=_build_tariffs_keyboard(tariffs),
            parse_mode=PARSE_MODE,
        )
    if callback:
        await callback.answer()



@router.callback_query(F.data.startswith(BUY_PREFIX))
async def payment_callback_handler(callback: types.CallbackQuery) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂ –∏ –≤—ã–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞."""
    user_id = callback.from_user.id
    raw = callback.data or ""
    try:
        tariff_id = int(raw.removeprefix(BUY_PREFIX))
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.", show_alert=True)
        return

    async with get_session() as session:
        tariff = await get_tariff_by_id(session, tariff_id)
    if not tariff:
        await callback.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π payload –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–ª–∞—Ç—ã
    unique_id = uuid.uuid4().hex
    payload = f"subscribe_{tariff.id}_{user_id}_{unique_id}"
    prices = [types.LabeledPrice(label=tariff.name, amount=int(tariff.price))]
    logger.info(
        "[STARS] send_invoice: user_id=%s, tariff_id=%s, payload=%s, price=%s, label=%s",
        user_id, tariff.id, payload, tariff.price, tariff.name
    )
    await callback.bot.send_invoice(
        chat_id=user_id,
        title=f"–ü–æ–¥–ø–∏—Å–∫–∞: {tariff.name}",
        description=f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã",
        payload=payload,
        provider_token="STARS",
        currency="XTR",
        prices=prices,
        need_email=False,
        need_name=False,
        need_phone_number=False,
        is_flexible=False,
    )
    await callback.answer()

@router.message(F.content_type == 'successful_payment')
async def stars_successful_payment_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã Stars: –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É."""
    user_id = message.from_user.id
    payload = message.successful_payment.invoice_payload  # —Ñ–æ—Ä–º–∞—Ç: subscribe_{tariff_id}_{user_id}_{uuid}
    try:
        if payload.startswith("subscribe_"):
            parts = payload.split("_")
            tariff_id = int(parts[1])
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
            return
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ.")
        return

    async with get_session() as session:
        tariff = await get_tariff_by_id(session, tariff_id)
        if not tariff:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await add_subscriber_with_duration(session, user_id, tariff.duration_days)

    logger.info(
        "[STARS] successful_payment: user_id=%s, payload=%s, total_amount=%s, currency=%s, telegram_payment_charge_id=%s, provider_payment_charge_id=%s",
        user_id,
        payload,
        message.successful_payment.total_amount,
        message.successful_payment.currency,
        message.successful_payment.telegram_payment_charge_id,
        message.successful_payment.provider_payment_charge_id
    )

    await message.answer(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ Stars –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ <b>{tariff.name}</b> –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ {tariff.duration_days} –¥–Ω–µ–π.",
        parse_mode="HTML"
    )
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É/–≥—Ä—É–ø–ø–µ
    user = message.from_user
    username = f"@{user.username}" if user.username else "‚Äî"
    full_name = user.full_name if hasattr(user, "full_name") else user.first_name
    await message.bot.send_message(
        SUPPORT_GROUP_ID,
        (
            f"<b>üí≥ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Stars</b>\n\n"
            f"üë§ {full_name} ({username})\n"
            f"üÜî <code>{user.id}</code>\n"
            f"üè∑Ô∏è {tariff.name}\n"
            f"‚è≥ {tariff.duration_days} –¥–Ω.\n"
            f"üí≥ Telegram ID: <code>{message.successful_payment.telegram_payment_charge_id}</code>\n"
            f"üí≥ Provider ID: <code>{message.successful_payment.provider_payment_charge_id}</code>\n"
        ),
        parse_mode="HTML",
        message_thread_id=SUBSCRIBE_TOPIC_ID,
    )
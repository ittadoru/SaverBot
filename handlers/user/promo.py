"""–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: –≤–≤–æ–¥, –≤–∞–ª–∏–¥–∞—Ü–∏—è, –∞–∫—Ç–∏–≤–∞—Ü–∏—è, –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏ –æ—Ç–º–µ–Ω–∞."""

from __future__ import annotations

import logging
import re
from typing import Any

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

from db.base import get_session
from db.promocodes import activate_promocode
from db.subscribers import get_subscriber_expiry
from states.promo import PromoStates

logger = logging.getLogger(__name__)

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
MAX_CODE_LENGTH = 32
CODE_REGEX = re.compile(r"^[A-Z0-9_-]+$")


def _prompt_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="promo_cancel")]]
    )


def _build_success_message(days: int, expiry_str: str | None) -> str:
    tail = f"\n–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{expiry_str}</b>" if expiry_str else ""
    return (
        "üéâ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n"
        f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ <b>{days}</b> –¥–Ω.{tail}"
    )


def _build_fail_message() -> str:
    return (
        "‚ö†Ô∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.</b>\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞."
    )


def _build_invalid_format_message() -> str:
    return (
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/-, –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤."
    )


def _build_same_code_message() -> str:
    return "‚ÑπÔ∏è –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –û—Ç–º–µ–Ω–∞."


async def _safe_delete(bot: Any, chat_id: int, message_id: int) -> None:
    try:
        await bot.delete_message(chat_id, message_id)
    except TelegramBadRequest:
        pass
    except Exception:  # noqa: BLE001
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ %s", message_id, exc_info=True)


@router.callback_query(F.data == "promo")
async def promo_start(callback: types.CallbackQuery, state: FSMContext) -> None:
    await _show_promo_prompt(callback.message, state)
    await callback.answer()
    logger.debug("–°—Ç–∞—Ä—Ç –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ user_id=%d", callback.from_user.id)

@router.message(F.text == "/promocode")
async def promo_command(message: types.Message, state: FSMContext) -> None:
    await _show_promo_prompt(message, state)

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∏ —Å –∫–Ω–æ–ø–∫–∏, –∏ —Å –∫–æ–º–∞–Ω–¥—ã) ---
async def _show_promo_prompt(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state == PromoStates.user:
        await message.answer("–£–∂–µ –∂–¥—É –ø—Ä–æ–º–æ–∫–æ–¥‚Ä¶")
        return
    prompt = await message.answer(
        "üéü –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:", reply_markup=_prompt_keyboard()
    )
    await state.update_data(last_bot_message_id=prompt.message_id, last_code=None)
    await state.set_state(PromoStates.user)

@router.callback_query(F.data == "promo_cancel")
async def promo_cancel(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    data = await state.get_data()
    await state.clear()
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    last_id = data.get("last_bot_message_id")
    if last_id:
        await _safe_delete(callback.bot, callback.message.chat.id, last_id)
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    logger.info("–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ user_id=%d", callback.from_user.id)


@router.message(PromoStates.user)
async def process_user_promocode(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: –≤–∞–ª–∏–¥–∞—Ü–∏—è, –∞–∫—Ç–∏–≤–∞—Ü–∏—è, –æ—Ç–≤–µ—Ç.

    –õ–æ–≥–∏–∫–∞:
      1. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–¥.
      2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç / –ø–æ–≤—Ç–æ—Ä.
      3. –ü—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.
      4. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å); –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
      5. –ü—Ä–∏ —É—Å–ø–µ—Ö–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ –∂–¥—ë–º –Ω–æ–≤—ã–π –≤–≤–æ–¥.
    """
    if not message.text:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.")
        return

    raw = message.text
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ –∏ –≤–æ–∫—Ä—É–≥
    code = re.sub(r"\s+", "", raw).upper()

    data = await state.get_data()
    last_code = data.get("last_code")
    last_bot_message_id = data.get("last_bot_message_id")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    if not code or len(code) > MAX_CODE_LENGTH or not CODE_REGEX.match(code):
        text = _build_invalid_format_message()
        await _respond_update(message, last_bot_message_id, text, state=state)
        return

    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ —Ç–æ–≥–æ –∂–µ –∫–æ–¥–∞
    if last_code and code == last_code:
        text = _build_same_code_message()
        await _respond_update(message, last_bot_message_id, text, state=state)
        return

    user = message.from_user
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–¥–æ–º (–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å / —á–∏—Å—Ç–æ—Ç–∞)
    await _safe_delete(message.bot, message.chat.id, message.message_id)

    async with get_session() as session:
        duration: int | None = await activate_promocode(session, user.id, code)
        expiry_date = None
        if duration:
            expiry = await get_subscriber_expiry(session, user.id)
            if expiry:
                expiry_date = expiry.strftime('%d.%m.%Y %H:%M')

    if duration:
        text = _build_success_message(duration, expiry_date)
        success = True
    else:
        text = _build_fail_message()
        success = False

    logger.info(
        "promo_attempt user_id=%d code=%s success=%s duration=%s",  # –∫—Ä–∞—Ç–∫–∏–π –ª–æ–≥
        user.id,
        code,
        success,
        duration,
    )

    await _respond_update(message, last_bot_message_id, text, success, state)

    if success:
        await state.clear()
    else:
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–¥, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–≤—Ç–æ—Ä
        await state.update_data(last_code=code)


async def _respond_update(
    message: types.Message,
    bot_msg_id: int | None,
    text: str,
    success: bool | None = None,
    state: FSMContext | None = None,
) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
      - –ü–æ–¥–∞–≤–ª—è–µ—Ç 'message is not modified' —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å.
      - –ü—Ä–∏ fallback —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –µ–≥–æ id.
      - success=True —É–¥–∞–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    if bot_msg_id:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_msg_id,
                text=text,
                reply_markup=None if success else _prompt_keyboard(),
                parse_mode="HTML",
            )
            return
        except TelegramBadRequest as e:
            low = str(e).lower()
            if "message is not modified" in low:
                logger.debug("–ü—Ä–æ–º–æ: —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º update (chat=%d)", message.chat.id)
                return
            if "message to edit not found" not in low:
                logger.debug("edit_message_text fallback: %s", e)
    sent = await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=None if success else _prompt_keyboard(),
    )
    if not success and state is not None:
        await state.update_data(last_bot_message_id=sent.message_id)

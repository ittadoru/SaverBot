"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.
"""
from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from db.users import get_ref_link, User
from db.base import get_session
from sqlalchemy import select, func

import config
from utils.keyboards import back_button

router = Router()

REFERRAL_LINK_TEXT = (
    "<b>üë• –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å!</b>\n\n"
    "–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º ‚Äî –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—ã –ø–æ–ª—É—á–∏—à—å <b>{ref_gift} –¥–Ω—è</b> –ø–æ–¥–ø–∏—Å–∫–∏!\n\n"
    "üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
    "üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{count}</b> —á–µ–ª."
)

async def get_referral_text(bot: Bot, user_id: int) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –±–æ–Ω—É—Å–æ–º."""
    bot_username = (await bot.me()).username
    ref_link = get_ref_link(bot_username, user_id)
    async with get_session() as session:
        result = await session.execute(select(func.count()).select_from(User).where(User.referrer_id == user_id))
        count = result.scalar_one()
    return REFERRAL_LINK_TEXT.format(ref_link=ref_link, count=count, ref_gift=config.REF_GIFT_DAYS)

@router.callback_query(F.data == "invite_friend")
async def invite_friend_callback(callback: CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –∏ –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏."""
    text = await get_referral_text(bot, callback.from_user.id)
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=back_button("profile"))

@router.message(Command("invite"))
async def invite_friend_command(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /invite."""
    text = await get_referral_text(bot, message.from_user.id)
    await message.answer(text, parse_mode="HTML", reply_markup=back_button("profile"))

@router.callback_query(F.data == "my_referrals")
async def my_referrals_callback(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã', –ø–æ–∫–∞–∑—ã–≤–∞—è —Ç—É –∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ –∏ '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞'."""
    text = await get_referral_text(bot, callback.from_user.id)
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=back_button("profile"))

async def get_referral_stats(session, user_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (count, level, is_vip) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    - level: 1 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), 2 (1+), 3 (3+), 4 (10+), 5 (30+)
    - is_vip: True –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å 3 –∏–ª–∏ –≤—ã—à–µ
    """
    result = await session.execute(
        select(func.count()).select_from(User).where(User.referrer_id == user_id)
    )
    count = result.scalar_one()
    if count >= 30:
        level = 5
    elif count >= 10:
        level = 4
    elif count >= 3:
        level = 3
    elif count >= 1:
        level = 2
    else:
        level = 1
    is_vip = level >= 4
    return count, level, is_vip

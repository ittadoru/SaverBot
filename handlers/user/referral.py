"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.
"""

from aiogram import Router
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hbold
from db.users import get_ref_link, User
from db.base import get_session
from sqlalchemy import select, func


router = Router()

@router.callback_query(lambda c: c.data == "invite_friend")
async def invite_friend(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É."""
    bot_username = (await callback.bot.me()).username
    user_id = callback.from_user.id
    ref_link = get_ref_link(bot_username, user_id)
    text = (
        "üë• <b>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å!</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º ‚Äî –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø—Ä–∏—è—Ç–Ω—ã–π –±–æ–Ω—É—Å!\n\n"
        f"{ref_link}"
    )
    await callback.message.answer(text, parse_mode="HTML")

@router.callback_query(lambda c: c.data == "my_referrals")
async def my_referrals(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."""
    user_id = callback.from_user.id
    async with get_session() as session:
        result = await session.execute(select(User).where(User.referrer_id == user_id))
        referrals = result.scalars().all()

    if not referrals:
        text = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å!"
    else:
        ref_list = f"{hbold('–¢–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã')}:\n\n"
        for u in referrals:
            uname = f"@{u.username}" if u.username else f"ID {u.id}"
            ref_list += f"‚Ä¢ {uname}\n"
        ref_list += f"\n–í—Å–µ–≥–æ: {len(referrals)} —á–µ–ª."
        text = ref_list
    await callback.message.answer(text, parse_mode="HTML")

async def get_referral_stats(session, user_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (count, level, is_vip) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    - level: 0 (–Ω–µ—Ç), 1 (1-2), 2 (3-9), 3 (10-29), 4 (30+)
    - is_vip: True –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å 3 –∏–ª–∏ –≤—ã—à–µ
    """
    result = await session.execute(
        select(func.count()).select_from(User).where(User.referrer_id == user_id)
    )
    count = result.scalar_one()
    if count >= 30:
        level = 4
    elif count >= 10:
        level = 3
    elif count >= 3:
        level = 2
    elif count >= 1:
        level = 1
    else:
        level = 0
    is_vip = level >= 3
    return count, level, is_vip
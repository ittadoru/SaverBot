
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiogram.utils.markdown as markdown
import asyncio
import os
from typing import Optional

from utils.platform_detect import detect_platform
from utils.video_utils import get_video_resolution
from utils.send import send_video, send_audio
from services import get_downloader
from services.youtube import YTDLPDownloader
from utils import logger as log
from db.base import get_session
from db.subscribers import is_subscriber
from db.users import log_user_activity, add_or_update_user
from db.channels import is_channel_guard_enabled, get_required_active_channels, check_user_memberships
from db.downloads import get_daily_downloads, increment_daily_download, increment_download, add_download_link
from db.platforms import increment_platform_download
from config import PRIMARY_ADMIN_ID, MAX_FREE_VIDEO_MB

router = Router()

FREE_DAILY_LIMIT = 20
FORMAT_SELECTION_TIMEOUT = 180  # seconds to wait for subscriber to pick YouTube format


# FSMContext-based busy/timeout management
BUSY_KEY = "busy"
PENDING_TASKS_KEY = "pending_format_tasks"
SUBSCRIBER_SELECTING_KEY = "subscriber_selecting"

def get_format_keyboard() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text='–í–∏–¥–µ–æ 240p', callback_data='yt_download:video_240'),
        InlineKeyboardButton(text='–í–∏–¥–µ–æ 360p', callback_data='yt_download:video_360')
    )
    kb.row(
        InlineKeyboardButton(text='–í–∏–¥–µ–æ 480p', callback_data='yt_download:video_480'),
        InlineKeyboardButton(text='–í–∏–¥–µ–æ 720p', callback_data='yt_download:video_720')
    )
    kb.row(InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ', callback_data='yt_download:audio'))
    return kb

async def is_user_busy(state: FSMContext) -> bool:
    data = await state.get_data()
    return data.get(BUSY_KEY, False)

async def set_user_busy(state: FSMContext, value: bool = True) -> None:
    await state.update_data({BUSY_KEY: value})

async def clear_user_busy(state: FSMContext) -> None:
    await state.update_data({BUSY_KEY: False})

async def set_pending_task(state: FSMContext, task: asyncio.Task) -> None:
    await state.update_data({PENDING_TASKS_KEY: task})

async def get_pending_task(state: FSMContext) -> Optional[asyncio.Task]:
    data = await state.get_data()
    return data.get(PENDING_TASKS_KEY)

async def clear_pending_task(state: FSMContext) -> None:
    await state.update_data({PENDING_TASKS_KEY: None})

async def set_subscriber_selecting(state: FSMContext, value: bool = True) -> None:
    await state.update_data({SUBSCRIBER_SELECTING_KEY: value})

async def is_subscriber_selecting(state: FSMContext) -> bool:
    data = await state.get_data()
    return data.get(SUBSCRIBER_SELECTING_KEY, False)

async def clear_subscriber_selecting(state: FSMContext) -> None:
    await state.update_data({SUBSCRIBER_SELECTING_KEY: False})

def _schedule_format_timeout(user_id: int, bot, chat_id: int, state: FSMContext):
    async def waiter():
        try:
            await asyncio.sleep(FORMAT_SELECTION_TIMEOUT)
            if await is_user_busy(state):
                await clear_user_busy(state)
                try:
                    await bot.send_message(chat_id, '‚åõÔ∏è –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω (—Ç–∞–π–º–∞—É—Ç). –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞.')
                except Exception:
                    pass
        except asyncio.CancelledError:
            return
        finally:
            await clear_pending_task(state)
    task = asyncio.create_task(waiter())
    asyncio.create_task(set_pending_task(state, task))

@router.message(F.text.regexp(r'https?://'))
async def download_handler(message: types.Message, state: FSMContext):

    url = message.text.strip()
    user = message.from_user
    platform = detect_platform(url)

    # --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã ---
    async with get_session() as session:
        guard_on = await is_channel_guard_enabled(session)
        if guard_on:
            required_channels = await get_required_active_channels(session)
            if required_channels:
                bot = message.bot
                check_results = await check_user_memberships(bot, user.id, required_channels)
                not_joined = [ch for ch, res in zip(required_channels, check_results) if not res.is_member]
                if not_joined:
                    text = "<b>–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
                    for ch in not_joined:
                        link = markdown.hlink(f"@{ch.username}", f"https://t.me/{ch.username}")
                        text += f"{link}\n"
                    text += "\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑."
                    await message.answer(text, parse_mode="HTML")
                    return

    # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω—É–∂–Ω–∞ —Å–µ—Å—Å–∏—è)
    if platform == 'youtube':
        async with get_session() as session:
            is_yt_sub = await is_subscriber(session, user.id)
    else:
        is_yt_sub = False


    if await is_user_busy(state):
        await message.answer('‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏.')
        return

    if is_yt_sub:
        await set_user_busy(state, True)
        await state.update_data({f'yt_url_{user.id}': url})
        await set_subscriber_selecting(state, True)
        kb = get_format_keyboard()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (3 –º–∏–Ω)...', reply_markup=kb.as_markup())
        _schedule_format_timeout(user.id, message.bot, message.chat.id, state)
        return

    await set_user_busy(state, True)
    if await check_download_limit(message, user.id):
        await clear_user_busy(state)
        return
    await message.answer('‚è≥ –°–∫–∞—á–∏–≤–∞–µ–º...')
    await process_download(message, url, user.id, platform)

async def check_download_limit(message: types.Message, user_id: int) -> bool:
    async with get_session() as session:
        daily = await get_daily_downloads(session, user_id)
        sub = await is_subscriber(session, user_id)
    if daily >= FREE_DAILY_LIMIT and not sub:
        await message.answer('‚ö†Ô∏è –õ–∏–º–∏—Ç 20 —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤ –¥–µ–Ω—å. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞.')
        return True
    return False

def _normalize_download_result(result):
    """–ü—Ä–∏–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç download() –∫ —Å—Ç—Ä–æ–∫–µ –ø—É—Ç–∏ –ª–∏–±–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü-–∫–æ—Ä—Ç–µ–∂ DENIED_SIZE.

    –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
      * 'path/to/file.mp4' ‚Äì –æ–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π.
      * ('DENIED_SIZE', size_mb_str) ‚Äì –æ—Ç–∫–∞–∑.
      * ('path/to/file.mp4', job_id) ‚Äì –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∏–±–æ ('DENIED_SIZE', size), –ª–∏–±–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–π –ø—É—Ç—å.
    """
    if isinstance(result, tuple):
        if result and result[0] == 'DENIED_SIZE':
            return result  # –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º (path, job_id)
        if len(result) == 2 and isinstance(result[0], str):
            return result[0]
    return result


async def process_download(message: types.Message, url: str, user_id: int, platform: str):
    try:
        downloader = get_downloader(url)
        async with get_session() as session:
            # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await add_or_update_user(session, user_id, message.from_user.first_name, message.from_user.username)
            if platform == 'youtube':
                raw_result = await downloader.download(url, user_id, message)
                normalized = _normalize_download_result(raw_result)
                if isinstance(normalized, tuple) and normalized and normalized[0] == 'DENIED_SIZE':
                    size_mb = normalized[1]
                    builder = InlineKeyboardBuilder()
                    builder.button(text='üí≥ –ü–æ–¥–ø–∏—Å–∫–∞', callback_data='subscribe:open')
                    await message.answer(
                        f'üö´ –í–∏–¥–µ–æ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ {MAX_FREE_VIDEO_MB} –ú–ë (—ç—Ç–æ {size_mb} –ú–ë) –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.',
                        reply_markup=builder.as_markup()
                    )
                    return
                file_path = normalized
            else:
                file_path = await downloader.download(url, user_id)
        if file_path is None:
            await message.answer('üö´ –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è).')
            return
        w, h = get_video_resolution(file_path)
        asyncio.create_task(send_video(message.bot, message, message.chat.id, user_id, file_path, w, h))
        async with get_session() as session:
            await log_user_activity(session, user_id)
            await increment_download(session, user_id)
            await increment_platform_download(session, user_id, platform)
            await increment_daily_download(session, user_id)  # —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –¥–ª—è –≤—Å–µ—Ö
            await add_download_link(session, user_id, url)
    except Exception as e:  # noqa: BLE001
        log.log_error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}')
        await message.answer('‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        try:
            await message.bot.send_message(PRIMARY_ADMIN_ID, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}')
        except Exception:  # noqa: BLE001
            pass
    finally:
        await clear_user_busy(user_id)


@router.callback_query(lambda c: c.data.startswith('yt_download:'))
async def yt_download_callback(callback: types.CallbackQuery, state: FSMContext):
    fmt = callback.data.split(':')[1]
    user = callback.from_user
    url = (await state.get_data()).get(f'yt_url_{user.id}')
    if not url:
        return await callback.answer('–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
    # –ê–Ω—Ç–∏—Å–ø–∞–º: –¥–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞/–∞—É–¥–∏–æ
    if await is_user_busy(state):
        if await is_subscriber_selecting(state):
            await clear_subscriber_selecting(state)
        else:
            return await callback.answer('‚è≥ –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä, –¥–æ–∂–¥–∏—Ç–µ—Å—å.')
    else:
        await set_user_busy(state, True)
    # –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    task = await get_pending_task(state)
    if task and not task.done():
        task.cancel()
    await clear_pending_task(state)
    await callback.message.answer('‚è≥ –°–∫–∞—á–∏–≤–∞–µ–º...')
    try:
        yt = YTDLPDownloader()
        if fmt.startswith('video_'):
            res = fmt.split('_')[1]
            res_map = {
                '240': 'bestvideo[ext=mp4][vcodec^=avc1][height<=240]+bestaudio[ext=m4a]/best[ext=mp4]',
                '360': 'bestvideo[ext=mp4][vcodec^=avc1][height<=360]+bestaudio[ext=m4a]/best[ext=mp4]',
                '480': 'bestvideo[ext=mp4][vcodec^=avc1][height<=480]+bestaudio[ext=m4a]/best[ext=mp4]',
                '720': 'bestvideo[ext=mp4][vcodec^=avc1][height<=720]+bestaudio[ext=m4a]/best[ext=mp4]',
            }
            raw_result = await yt.download(url, user.id, callback.message, custom_format=res_map.get(res, res_map['480']))
            normalized = _normalize_download_result(raw_result)
            if isinstance(normalized, tuple) and normalized and normalized[0] == 'DENIED_SIZE':
                size_mb = normalized[1]
                builder = InlineKeyboardBuilder()
                builder.button(text='üí≥ –ü–æ–¥–ø–∏—Å–∫–∞', callback_data='subscribe:open')
                await callback.message.answer(
                    f'üö´ –í–∏–¥–µ–æ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ {MAX_FREE_VIDEO_MB} –ú–ë (—ç—Ç–æ {size_mb} –ú–ë) –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.',
                    reply_markup=builder.as_markup()
                )
                return
            path = normalized
            w, h = get_video_resolution(path)
            asyncio.create_task(send_video(callback.bot, callback.message, callback.message.chat.id, user.id, path, w, h))
        elif fmt == 'audio':
            path = await yt.download_audio(url, user.id)
            asyncio.create_task(send_audio(callback.bot, callback.message, callback.message.chat.id, path))
        else:
            return await callback.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.')
        async with get_session() as session:
            await log_user_activity(session, user.id)
            await increment_download(session, user.id)
            await increment_platform_download(session, user.id, 'youtube')
            await increment_daily_download(session, user.id)  # —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –¥–ª—è –≤—Å–µ—Ö
            await add_download_link(session, user.id, url)
    except Exception as e:  # noqa: BLE001
        log.log_error(f'–û—à–∏–±–∫–∞: {e}')
        try:
            await callback.message.answer('‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.')
        except Exception:
            pass
    finally:
        await clear_user_busy(state)
    await clear_subscriber_selecting(state)


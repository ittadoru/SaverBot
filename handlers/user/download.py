import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext

from utils.download_files.clean_url import strip_url_after_ampersand
from utils.platform_detect import detect_platform
from utils.download_files.download_manager import (
    is_busy, set_busy, check_download_permissions, process_youtube_or_other
)
from utils.download_files.youtube_utils import prepare_youtube_menu
from utils.keyboards import subscribe_keyboard

logger = logging.getLogger(__name__)
router = Router()


@router.message(F.text.regexp(r'https?://'))
async def download_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ª–∏–º–∏—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    url = strip_url_after_ampersand(message.text.strip())
    user = message.from_user

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
    if await is_busy(state):
        return await message.answer("‚è≥ –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–∞—è –∑–∞–≥—Ä—É–∑–∫–∞.")
    await set_busy(state, True)

    wait_message = await message.answer("‚è≥ –°–µ–∫—É–Ω–¥—É...")

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤, –ø–æ–¥–ø–∏—Å–∫–∏, –∫–∞–Ω–∞–ª–æ–≤
        can_download, reason = await check_download_permissions(user.id)
        if not can_download:
            return await message.answer(reason, parse_mode="HTML")

        platform = detect_platform(url)

        if platform == "youtube":
            keyboard, caption, preview = await prepare_youtube_menu(url, user.id)
            await state.update_data({"yt_url": url})
            return await message.answer_photo(
                photo=preview,
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML",
            )

        await wait_message.delete()

        # –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ‚Äî —Å—Ä–∞–∑—É –∫–∞—á–∞–µ–º
        await process_youtube_or_other(message, url, user.id, platform, state)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ download_handler: {e}", exc_info=True)
        await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await set_busy(state, False)


@router.callback_query(lambda c: c.data.startswith("ytres:"))
async def ytres_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è YouTube-–≤–∏–¥–µ–æ."""
    _, itag = callback.data.split(":", 1)
    user = callback.from_user

    await set_busy(state, True)
    await callback.message.answer("‚è≥ –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    data = await state.get_data()
    url = data.get("yt_url")

    await process_youtube_or_other(callback.message, url, user.id, "youtube", state, itag)


@router.callback_query(lambda c: c.data.startswith("ytlocked:"))
async def ytlocked_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω —Ä–∞–∑–º–µ—Ä)."""
    parts = callback.data.split(":", 2)
    reason = parts[1] if len(parts) > 1 else "sub"

    if reason == "file":
        text = ("üîí –î–∞–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.\n\n"
                "–ü–æ–≤—ã—Å—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.")
    else:
        text = ("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n\n"
                "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.")

    await callback.message.answer(text, reply_markup=subscribe_keyboard())
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("ytdl:"))
async def ytdl_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Å YouTube."""
    _, mode, url = callback.data.split(":", 2)
    user = callback.from_user

    await set_busy(state, True)
    await callback.message.answer("‚è≥ –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ...")

    await process_youtube_or_other(callback.message, url, user.id, "youtube", state, mode)

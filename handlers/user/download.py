import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
import aiogram.utils.markdown as markdown
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.platform_detect import detect_platform
from utils.video_utils import get_video_resolution
from utils.send import send_video, send_audio
from services.youtube import YTDLPDownloader
from db.base import get_session
from db.subscribers import is_subscriber
from db.downloads import get_daily_downloads
from db.users import log_user_activity, add_or_update_user
from db.channels import is_channel_guard_enabled, get_required_active_channels, check_user_memberships
from db.platforms import increment_platform_download
from handlers.user.referral import get_referral_stats
from config import DAILY_DOWNLOAD_LIMITS, DOWNLOAD_FILE_LIMIT
from services import get_downloader


logger = logging.getLogger(__name__)
router = Router()
BUSY_KEY = "busy"

async def strip_url_after_ampersand(url: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç url –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ & (–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –¥–æ –ø–µ—Ä–≤–æ–≥–æ &).
    –ù–∞–ø—Ä–∏–º–µ—Ä: https://youtube.com/watch?v=abc&list=xyz -> https://youtube.com/watch?v=abc
    """
    if '&' in url:
        return url.split('&', 1)[0]
    return url
    
@router.message(F.text.regexp(r'https?://'))
async def download_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ª–∏–º–∏—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    url = message.text.strip()
    user = message.from_user
    platform = detect_platform(url)
    url = await strip_url_after_ampersand(url)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
    data = await state.get_data()
    if data.get(BUSY_KEY, False):
        await message.answer('‚è≥ –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–∞—è –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.')
        return
    await state.update_data({BUSY_KEY: True})

    async with get_session() as session:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        daily = await get_daily_downloads(session, user.id)
        sub = await is_subscriber(session, user.id)
        _, level, is_vip = await get_referral_stats(session, user.id)
        guard_on = await is_channel_guard_enabled(session)
        required_channels = await get_required_active_channels(session) if guard_on and not is_vip else []
    limit = DAILY_DOWNLOAD_LIMITS.get(level)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not sub and limit is not None and daily >= limit:
        await message.answer(f'‚ö†Ô∏è –õ–∏–º–∏—Ç {limit} —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤ –¥–µ–Ω—å. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞.')
        await state.update_data({BUSY_KEY: False})
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    if required_channels:
        bot = message.bot
        check_results = await check_user_memberships(bot, user.id, required_channels)
        not_joined = [ch for ch, res in zip(required_channels, check_results) if not res.is_member]
        if not_joined:
            text = "<b>–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
            for ch in not_joined:
                link = markdown.hlink(f"@{ch.username}", f"https://t.me/{ch.username}")
                text += f"{link}\n"
            text += "\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑."
            await message.answer(text, parse_mode="HTML")
            await state.update_data({BUSY_KEY: False})
            return

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ YouTube –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if platform == 'youtube':
        try:
            wait_msg = await message.answer('‚è≥ –°–µ–∫—É–Ω–¥—É...')
            downloader = YTDLPDownloader()
            max_filesize_mb = await get_max_filesize_mb(level, sub)
            info = await downloader.get_available_video_options(url)
            preview = info['thumbnail_url']
            
            # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ---
            unique_res = {}
            for fmt in info['formats']:
                if fmt.get('mime_type') == 'video/mp4':
                    res_str = fmt.get('res')
                    if res_str and res_str.endswith('p'):
                        try:
                            res_int = int(res_str.replace('p',''))
                            if 240 <= res_int <= 1080:
                                # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç progressive=True
                                if res_str not in unique_res or (fmt.get('progressive') and not unique_res[res_str].get('progressive')):
                                    unique_res[res_str] = fmt
                        except (ValueError, TypeError):
                            continue

            sorted_res = sorted(unique_res.items(), key=lambda x: int(x[0].replace('p','')))
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            max_res = max([int(r.replace('p','')) for r, _ in sorted_res], default=0)

            # --- –õ–æ–≥–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ---
            def is_free(res):
                res_int = int(res.replace('p',''))
                if max_res >= 720:
                    return res_int in (240, 360, 480)
                elif max_res == 480:
                    return res_int in (240, 360)
                elif max_res == 360:
                    return res_int == 240
                else:
                    return False

            # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤–µ—Å–æ–º –∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏ ---
            lines = [f"<b>üé¨ {info['title']}</b>\n"]
            lines.append("–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:")
            for res, fmt in sorted_res:
                size_mb = fmt.get('size_mb') or (fmt.get('filesize', 0) / 1024 / 1024)
                size_str = f"{size_mb:.0f}MB" if size_mb else "?MB"
                if size_mb and max_filesize_mb and size_mb > max_filesize_mb:
                    emoji = 'üîí'
                elif sub or is_free(res):
                    emoji = '‚ö°Ô∏è'
                else:
                    emoji = 'üîí'
                lines.append(f"{emoji}  {res}:  {size_str}")
            lines.append("")
            lines.append("<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ:</i>")
            
            # --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
            rows = []
            row = []
            for res, fmt in sorted_res:
                size_mb = fmt.get('size_mb') or (fmt.get('filesize', 0) / 1024 / 1024)
                # –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ free –∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –≤—Å–µ–≥–¥–∞ –∑–∞–º–æ–∫ –∏ ytlocked:sub
                if not (sub or is_free(res)):
                    emoji = 'üîí'
                    cb = f"ytlocked:sub:{res}"
                # –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ free –∏–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
                elif size_mb is not None and size_mb > max_filesize_mb:
                    emoji = 'üîí'
                    cb = f"ytlocked:file:{res}"
                else:
                    emoji = '‚ö°Ô∏è'
                    cb = f"ytres:{fmt['itag']}"
                row.append(InlineKeyboardButton(text=f"{emoji} {res}", callback_data=cb))
                if len(row) == 2:
                    rows.append(row)
                    row = []

            if row:
                rows.append(row)
            # –ê—É–¥–∏–æ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ
            rows.append([
                InlineKeyboardButton(
                    text="üéß –ê—É–¥–∏–æ",
                    callback_data=f"ytdl:audio:{url}"
                )
            ])
            keyboard = InlineKeyboardMarkup(inline_keyboard=rows)

            await state.update_data({"yt_url": url})
            await message.answer_photo(
                photo=preview,
                caption='\n'.join(lines),
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            try:
                await wait_msg.delete()
            except Exception:
                pass
        except Exception as e:
            await message.answer('–û—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
            logger.error(f'‚ùå [DOWNLOAD] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {e}', exc_info=True)
        await state.update_data({BUSY_KEY: False})
        return

@router.callback_query(lambda c: c.data.startswith('ytres:'))
async def ytres_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è YouTube-–≤–∏–¥–µ–æ."""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è YouTube
    _, itag = callback.data.split(':', 1)
    user = callback.from_user
    await state.update_data({BUSY_KEY: True})
    await callback.message.answer('‚è≥ –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç...')
    data = await state.get_data()
    url = data.get("yt_url")

    async with get_session() as session:
        _, level, _ = await get_referral_stats(session, user.id)
        sub = await is_subscriber(session, user.id)

    await process_youtube_or_other(callback.message, url, user.id, 'youtube', state, itag, level, sub)

@router.callback_query(lambda c: c.data.startswith('ytlocked:'))
async def ytlocked_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: file ‚Äî –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞, sub ‚Äî –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.
    """
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")]
    ])
    parts = callback.data.split(':', 2)
    reason = parts[1] if len(parts) > 1 else 'sub'
    if reason == 'file':
        text = ('üîí –î–∞–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –≤–∞—Å.\n\n'
                '–ü–æ–≤—ã—Å—å—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.')
    else:
        text = ('üîí –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n\n'
                '–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.')
    await callback.message.answer(text, reply_markup=kb)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith('ytdl:'))
async def ytdl_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Å YouTube."""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Å YouTube
    _, mode, url = callback.data.split(':', 2)
    user = callback.from_user
    await state.update_data({BUSY_KEY: True})
    await callback.message.answer('‚è≥ –°–∫–∞—á–∏–≤–∞–µ–º...')
    async with get_session() as session:
        _, level, _ = await get_referral_stats(session, user.id)
    await process_youtube_or_other(callback.message, url, user.id, 'youtube', state, mode, level, True)

async def get_max_filesize_mb(level, sub):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if level == 1:
        max_filesize_mb = DOWNLOAD_FILE_LIMIT
    elif level == 2:
        max_filesize_mb = DOWNLOAD_FILE_LIMIT * 3
    elif level == 3:
        max_filesize_mb = DOWNLOAD_FILE_LIMIT * 5
    else:
        max_filesize_mb = DOWNLOAD_FILE_LIMIT * 10
    return max_filesize_mb

async def process_youtube_or_other(message, url, user_id, platform, state, mode, level, sub):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if platform == 'youtube':
            downloader = YTDLPDownloader()

            max_filesize_mb = await get_max_filesize_mb(level, sub)

            if mode == 'audio':
                file_path = await downloader.download_audio(url)
                await send_audio(message.bot, message, message.chat.id, file_path)
            
            elif mode.isdigit():
        
                result = await downloader.download_by_itag(url, int(mode), message, user_id)
                if isinstance(result, tuple) and result[0] == 'DENIED_SIZE':
                    # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                    await message.answer(f'‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {result[1]} –ú–ë. –í–∞—à –ª–∏–º–∏—Ç ‚Äî {max_filesize_mb} –ú–ë. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.')
                    await state.update_data({BUSY_KEY: False})
                    return
                file_path = result
                w, h = get_video_resolution(file_path)
                await send_video(message.bot, message, message.chat.id, user_id, file_path, w, h)
            else:
                result = await downloader.download(url, message, user_id)
                if isinstance(result, tuple) and result[0] == 'DENIED_SIZE':
                    # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                    await message.answer(f'‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {result[1]} –ú–ë. –í–∞—à –ª–∏–º–∏—Ç ‚Äî {max_filesize_mb} –ú–ë. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.')
                    await state.update_data({BUSY_KEY: False})
                    return
                file_path = result
                w, h = get_video_resolution(file_path)
                await send_video(message.bot, message, message.chat.id, user_id, file_path, w, h)
        
        else:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
            downloader = get_downloader(url)
            file_path = await downloader.download(url, user_id)
            w, h = get_video_resolution(file_path)
            await send_video(message.bot, message, message.chat.id, user_id, file_path, w, h)

        async with get_session() as session:
            await add_or_update_user(session, user_id, getattr(message.from_user, 'first_name', None), getattr(message.from_user, 'username', None))
            await log_user_activity(session, user_id)
            await increment_platform_download(session, user_id, platform)
    except Exception as e:
        logger.error(f'‚ùå [DOWNLOAD] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}')
        await message.answer('‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    finally:
        await state.update_data({BUSY_KEY: False})
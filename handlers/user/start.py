
"""–°—Ç–∞—Ä—Ç: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞—á–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–æ–≤—ã–º."""

import logging

import random
from typing import Optional

from aiogram import F, Router, types
from aiogram.filters import Command

from db.base import get_session
from db.promocodes import add_promocode, get_promocode
from db.users import add_or_update_user, is_user_exists, log_user_activity
from db.subscribers import add_subscriber_with_duration
from handlers.user.referral import get_referral_stats
from config import SUBSCRIPTION_LIFETIME_DAYS, SUPPORT_GROUP_ID, NEW_USER_TOPIC_ID
from handlers.user.menu import MAIN_MENU_TEXT, get_main_menu_keyboard

logger = logging.getLogger(__name__)

PROMO_DURATION_DAYS = 7
PROMO_PREFIX = "WELCOME"
PROMO_RANDOM_MIN = 100_000
PROMO_RANDOM_MAX = 999_999
PROMO_MAX_TRIES = 5
REF_GIFT_DAYS = 10

router = Router()

async def _generate_unique_promocode(session, tries: int = PROMO_MAX_TRIES) -> str | None:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ –∏–ª–∏ None.
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞ (–±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ).
    """
    for attempt in range(1, tries + 1):
        code = f"{PROMO_PREFIX}-{random.randint(PROMO_RANDOM_MIN, PROMO_RANDOM_MAX)}"
        exists = await get_promocode(session, code)
        if exists:
            continue
        await add_promocode(session, code, duration_days=PROMO_DURATION_DAYS)
        return code
    logger.warning(
        "‚ö†Ô∏è [START] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫", tries
    )
    return None

# --- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (Message –∏–ª–∏ CallbackQuery) ---
def _is_callback(ctx) -> bool:
    return isinstance(ctx, types.CallbackQuery)

def _get_message(ctx) -> types.Message:
    return ctx.message if _is_callback(ctx) else ctx

async def send_or_edit(
    ctx,
    text: str,
    reply_markup=None,
    parse_mode: str | None = None,
    edit_if_callback: bool = True,
):
    """
    –ï—Å–ª–∏ ctx ‚Äî CallbackQuery –∏ edit_if_callback=True -> –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å callback.message
    –ò–Ω–∞—á–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ message.answer()
    """
    msg = _get_message(ctx)
    if _is_callback(ctx) and edit_if_callback:
        try:
            # –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await msg.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        except Exception:
            # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, MessageNotModified, –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ) ‚Äî
            # fallback: –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await msg.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
    else:
        await msg.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)


# --- —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è ctx ---
def parse_ref_args(ctx, user_id: int):
    message = _get_message(ctx)
    args = message.get_args() if hasattr(message, "get_args") else ""
    if not args and message.text:
        parts = message.text.split(maxsplit=1)
        if len(parts) == 2:
            args = parts[1]

    if args and args.startswith("ref_"):
        try:
            ref_id = int(args[4:])
            if ref_id != user_id:
                return ref_id
        except Exception:
            pass
    return None


async def register_user(session, ctx, referrer_id: int | None):
    message = _get_message(ctx)
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    username = message.from_user.username

    is_new = not await is_user_exists(session, user_id)
    user = await add_or_update_user(
        session,
        user_id,
        first_name=first_name,
        username=username,
        referrer_id=referrer_id if is_new else None,
    )
    await log_user_activity(session, user_id)

    promo_code = None
    if is_new:
        promo_code = await _generate_unique_promocode(session)

    return is_new, promo_code


async def process_referral_bonus(session, ctx, user_id: int, referrer_id: int):
    message = _get_message(ctx)
    try:
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
        await message.answer("–¢—ã –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞! (3 –¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏)")
        await add_subscriber_with_duration(session, user_id, REF_GIFT_DAYS)

        # —É–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º
        await message.bot.send_message(referrer_id, "–¢—ã –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞! (3 –¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏)")
        await add_subscriber_with_duration(session, referrer_id, REF_GIFT_DAYS)
        logger.info(f"üéÅ [START] –ù–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å (+3 –¥–Ω—è) –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id} –∑–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        ref_count, level, _ = await get_referral_stats(session, referrer_id)

        # —É—Ä–æ–≤–Ω–∏
        if ref_count == 30:
            await add_subscriber_with_duration(session, referrer_id, SUBSCRIPTION_LIFETIME_DAYS)
            try:
                await message.bot.send_message(referrer_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 5 —É—Ä–æ–≤–Ω—è (30 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤) –∏ –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å—Å—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É!")
            except Exception:
                pass
            logger.info(f"üèÜ [REFERAL] –†–µ—Ñ–µ—Ä–µ—Ä {referrer_id} –ø–æ–ª—É—á–∏–ª –±–µ—Å—Å—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 5 —É—Ä–æ–≤–µ–Ω—å ({ref_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)")
        elif ref_count == 10:
            try:
                await message.bot.send_message(referrer_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 4 —É—Ä–æ–≤–Ω—è (10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤) –∏ –ø–æ–ª—É—á–∏–ª–∏ VIP-—Å—Ç–∞—Ç—É—Å!")
            except Exception:
                pass
            logger.info(f"‚≠êÔ∏è [REFERAL] –†–µ—Ñ–µ—Ä–µ—Ä {referrer_id} —Å—Ç–∞–ª VIP –∑–∞ 4 —É—Ä–æ–≤–µ–Ω—å ({ref_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)")
        elif ref_count == 3:
            try:
                await message.bot.send_message(referrer_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 3 —É—Ä–æ–≤–Ω—è (3 —Ä–µ—Ñ–µ—Ä–∞–ª–∞) –∏ —É–ª—É—á—à–∏–ª–∏ –ª–∏–º–∏—Ç—ã!")
            except Exception:
                pass
            logger.info(f"ü•â [REFERAL] –†–µ—Ñ–µ—Ä–µ—Ä {referrer_id} –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å –∑–∞ 3 —É—Ä–æ–≤–µ–Ω—å ({ref_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)")
        elif ref_count == 1:
            try:
                await message.bot.send_message(referrer_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 2 —É—Ä–æ–≤–Ω—è (1 —Ä–µ—Ñ–µ—Ä–∞–ª) –∏ —É–ª—É—á—à–∏–ª–∏ –ª–∏–º–∏—Ç—ã!")
            except Exception:
                pass
            logger.info(f"ü•à [REFERAL] –†–µ—Ñ–µ—Ä–µ—Ä {referrer_id} –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å –∑–∞ 2 —É—Ä–æ–≤–µ–Ω—å ({ref_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)")

    except Exception as e:
        logger.error(f"‚ùå [START] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}: {e}")


async def send_welcome_message(ctx, promo_code: str | None):
    # –ø—Ä–æ–º–æ ‚Äî –æ–±—ã—á–Ω–æ —Ö–æ—Ç–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ø–æ—ç—Ç–æ–º—É edit_if_callback=False
    if promo_code:
        promo_text = (
            f"–ü–æ–¥–∞—Ä–æ–∫ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ {PROMO_DURATION_DAYS} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            f"<pre>{promo_code}</pre>\n–ê–∫—Ç–∏–≤–∏—Ä—É–π –µ–≥–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è.\n\n"
        )
        await send_or_edit(ctx, promo_text, parse_mode="HTML", edit_if_callback=False)


async def notify_support_group(bot, user_id: int, username_raw: str, referrer_id: int | None):
    try:
        await bot.send_message(
            SUPPORT_GROUP_ID,
            text=f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n\nID: {user_id}\n–ò–º—è: {username_raw}\n–†–µ—Ñ–µ—Ä–∞–ª: {referrer_id}",
            message_thread_id=NEW_USER_TOPIC_ID,
        )
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")


async def show_main_menu(ctx):
    message = _get_message(ctx)
    await send_or_edit(
        ctx,
        MAIN_MENU_TEXT.format(username=message.from_user.username),
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML",
        edit_if_callback=True,  # –ø—Ä–∏ callback'–µ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    )


# ================== –µ–¥–∏–Ω—ã–π flow –¥–ª—è /start –∏ callback_data="start" ==================
@router.message(Command("start"))
async def cmd_start_message(message: types.Message):
    # –≤—ã–∑—ã–≤–∞–µ–º –µ–¥–∏–Ω—ã–π flow; –¥–ª—è –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–µ –±—É–¥–µ–º
    await start_flow(message)


@router.callback_query(F.data == "start")
async def cmd_start_callback(callback: CallbackQuery):
    # –≤—ã–∑—ã–≤–∞–µ–º –µ–¥–∏–Ω—ã–π flow; –¥–ª—è callback'–∞ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    await start_flow(callback)
    # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ answer() —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∫—Ä—É—Ç–∏–ª–∫—É" –≤ –∫–ª–∏–µ–Ω—Ç–µ
    try:
        await callback.answer()
    except Exception:
        pass


async def start_flow(ctx):
    """
    ctx: types.Message | types.CallbackQuery
    –æ–±—â–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ / –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π / –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
    """
    message = _get_message(ctx)
    user_id = message.from_user.id
    username_raw = message.from_user.username or message.from_user.full_name

    # –ø–∞—Ä—Å–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏–∑ —Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å
    referrer_id = parse_ref_args(ctx, user_id)

    bot_user = await message.bot.get_me()
    if user_id == bot_user.id:
        return

    async with get_session() as session:
        is_new, promo_code = await register_user(session, ctx, referrer_id)

        if is_new and referrer_id:
            await process_referral_bonus(session, ctx, user_id, referrer_id)

        if is_new:
            await send_welcome_message(ctx, promo_code)
            await notify_support_group(message.bot, user_id, username_raw, referrer_id)

    await show_main_menu(ctx)

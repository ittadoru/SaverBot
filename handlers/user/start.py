"""–°—Ç–∞—Ä—Ç: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞—á–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–æ–≤—ã–º."""

from __future__ import annotations

import logging
import random
from typing import Optional

from aiogram import Router, types
from aiogram.filters import Command

from db.base import get_session
from db.promocodes import add_promocode, get_promocode
from db.users import add_or_update_user, is_user_exists, log_user_activity

logger = logging.getLogger(__name__)


# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–Ω–µ—Ç ¬´–º–∞–≥–∏—á–µ—Å–∫–∏—Ö¬ª —á–∏—Å–µ–ª/—Å—Ç—Ä–æ–∫ –≤ –∫–æ–¥–µ –Ω–∏–∂–µ) ---
PROMO_DURATION_DAYS = 7
PROMO_PREFIX = "WELCOME"
PROMO_RANDOM_MIN = 100_000
PROMO_RANDOM_MAX = 999_999
PROMO_MAX_TRIES = 5  # –ø–æ–ø—ã—Ç–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥

router = Router()

async def _generate_unique_promocode(session, tries: int = PROMO_MAX_TRIES) -> Optional[str]:
    """–ü—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ –∏–ª–∏ None.

    –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞ (–±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ).
    """
    for attempt in range(1, tries + 1):
        code = f"{PROMO_PREFIX}-{random.randint(PROMO_RANDOM_MIN, PROMO_RANDOM_MAX)}"
        exists = await get_promocode(session, code)
        if exists:
            continue
        await add_promocode(session, code, duration_days=PROMO_DURATION_DAYS)
        logger.info("–°–æ–∑–¥–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ %s (–ø–æ–ø—ã—Ç–∫–∞ %d)", code, attempt)
        return code
    logger.warning(
        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫", tries
    )
    return None


@router.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /start: –¥–æ–±–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –¥–∞—ë—Ç –ø–æ–¥–∞—Ä–æ–∫ –Ω–æ–≤—ã–º."""
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    username_raw = message.from_user.username or message.from_user.full_name
    username_display = username_raw or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    promo_code: Optional[str] = None
    is_new: bool = False

    async with get_session() as session:
        is_new = not await is_user_exists(session, user_id)
        user = await add_or_update_user(
            session, user_id, first_name=first_name, username=message.from_user.username
        )
        await log_user_activity(session, user_id)
        if is_new:
            promo_code = await _generate_unique_promocode(session)

    if is_new:
        if promo_code:
            promo_text = (
                f"–í –ø–æ–¥–∞—Ä–æ–∫ —Ç–µ–±–µ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ {PROMO_DURATION_DAYS} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: "
                f"<pre>{promo_code}</pre>\n–ê–∫—Ç–∏–≤–∏—Ä—É–π –µ–≥–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è (/profile).\n\n"
            )
        else:
            promo_text = ""
    else:
        promo_text = ""

    if is_new:
        logger.info("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (id=%s) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", username_raw, user_id)
    else:
        logger.debug("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å—Ç–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id=%s", user_id)

    await message.answer(
        (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {username_display}!\n\n"
            f"{promo_text}"
            "–¢–≤–æ–π <b>–ø—Ä–æ—Ñ–∏–ª—å</b> —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –ª–∏–º–∏—Ç–∞–º–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /profile."
        ),
        parse_mode="HTML",
    )

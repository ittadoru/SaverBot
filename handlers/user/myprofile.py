
from aiogram import Router, F, types
from aiogram.types import CallbackQuery
from datetime import datetime
from utils.redis import r, get_platform_stats, get_user_links

router = Router()

@router.callback_query(lambda c: c.data == "myprofile")
async def show_profile(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ ID –∏–ª–∏ username, –ø–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    if user_id is None:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    expire_timestamp = await r.get(f"subscriber:expire:{user_id}")
    if expire_timestamp:
        expire_timestamp = int(expire_timestamp)
        expiry_date = datetime.fromtimestamp(expire_timestamp)
        if expiry_date > datetime.now():
            subscription_status = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{expiry_date.strftime('%d.%m.%Y %H:%M')}</b>"
        else:
            subscription_status = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
    else:
        subscription_status = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"

    name = callback.from_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    username = callback.from_user.username or ""

    user_info = "<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n\n"
    user_info += f"ID: <code>{user_id}</code>\n"
    user_info += f"–ò–º—è: {name}\n"
    user_info += f"{subscription_status}\n"
    user_info += f"Username: @{username}\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    platform_stats = await get_platform_stats(user_id)
    if platform_stats:
        sorted_stats = sorted(platform_stats.items(), key=lambda x: x[1], reverse=True)
        stats_text = "\n".join([f"{platform}: {count}" for platform, count in sorted_stats])
        stats_block = f"\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:</b>\n<pre>{stats_text}</pre>"
    else:
        stats_block = "\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:</b>\n–ù–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–π."

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Å—ã–ª–æ–∫
    links = await get_user_links(user_id)
    if links:
        links_text = "\n".join([f"<pre>{link}</pre>" for link in links[:5]])
        links_block = f"\n\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Å—ã–ª–æ–∫:</b>\n{links_text}"
    else:
        links_block = "\n\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Å—ã–ª–æ–∫:</b>\n–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å—Å—ã–ª–æ–∫."

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]
        ]
    )

    full_text = user_info + stats_block + links_block
    await callback.message.edit_text(full_text, parse_mode="HTML", reply_markup=keyboard)

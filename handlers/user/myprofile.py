"""–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""

from datetime import datetime
import logging
from aiogram import Router, types
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from db.base import get_session
from db.subscribers import get_subscriber_expiry

logger = logging.getLogger(__name__)

router = Router()


def _build_profile_keyboard() -> types.InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è."""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")],
        ]
    )


def _format_subscription_status(expire_at: datetime | None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏."""
    if not expire_at:
        return "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
    now = datetime.now(expire_at.tzinfo)
    if expire_at > now:
        return f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{expire_at.strftime('%d.%m.%Y %H:%M')}</b>"
    return "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"


def _build_profile_text(user_id: int, name: str, username: str, status: str) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è."""
    username_part = f"@{username}" if username else "‚Äî"
    return (
        "<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n\n"
        f"ID: <code>{user_id}</code>\n"
        f"–ò–º—è: {name}\n"
        f"{status}\n"
        f"Username: {username_part}\n"
    )


@router.callback_query(lambda c: c.data == "myprofile")
async def show_profile(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–Ω–æ–ø–∫–∞ myprofile)."""
    user_id = callback.from_user.id
    name = callback.from_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    username = callback.from_user.username or ""
    logger.debug("–û—Ç–∫—Ä—ã—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º user_id=%d", user_id)

    async with get_session() as session:
        expire_at = await get_subscriber_expiry(session, user_id)
    status = _format_subscription_status(expire_at)
    text = _build_profile_text(user_id, name, username, status)

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ —Ç–∞–∫–æ–π –∂–µ ‚Äî –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º (—á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫—É)
    current = (callback.message.text or "").strip()
    if current == text.strip():
        await callback.answer()
        logger.debug("–ü—Ä–æ—Ñ–∏–ª—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (user_id=%d)", user_id)
        return

    try:
        await callback.message.edit_text(
            text, parse_mode="HTML", reply_markup=_build_profile_keyboard()
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            await callback.answer()
            logger.debug(
                "–ü–æ–¥–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ 'message is not modified' (user_id=%d)", user_id
            )
            return
        # –ù–∞ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—É—Å—Ç—å –≤–∏–¥–Ω–æ –≤ –ª–æ–≥–∞—Ö
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å user_id=%d", user_id)
        raise

    await callback.answer()
    logger.info("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞–∑–∞–Ω user_id=%d", user_id)

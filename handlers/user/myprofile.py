"""–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""

from datetime import datetime
import logging
from aiogram import Router, types
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from db.base import get_session
from db.subscribers import get_subscriber_expiry
from db.downloads import get_total_downloads, get_daily_downloads
from db.platforms import get_platform_counts, PLATFORMS
from handlers.user.referral import get_referral_stats


logger = logging.getLogger(__name__)

router = Router()


def _build_profile_keyboard() -> types.InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è."""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")],
        ]
    )


def _format_subscription_status(expire_at: datetime | None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏."""
    if not expire_at:
        return "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
    now = datetime.now(expire_at.tzinfo)
    if expire_at > now:
        if expire_at.year > 2124:
            return "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: <b>–±–µ—Å—Å—Ä–æ—á–Ω–∞—è</b>"
        return f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{expire_at.strftime('%d.%m.%Y %H:%M')}</b>"
    return "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"


def _build_profile_text(user_id: int, name: str, username: str, status: str, total: int, today: int, left: int, platform_stats: dict) -> str:
    username_part = f"@{username}" if username else "‚Äî"
    stats = (
        f"<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n\n"
        f"ID: <code>{user_id}</code>\n"
        f"–ò–º—è: {name}\n"
        f"{status}\n"
        f"Username: {username_part}\n\n"
        f"<b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: <b>{total}</b>\n"
        f"  ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: <b>{today}</b> (–æ—Å—Ç–∞–ª–æ—Å—å: <b>{left}</b>)\n"
    )
    stats += "  ‚Ä¢ –ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:\n"
    for p in PLATFORMS:
        stats += f"    {p.title()}: <b>{platform_stats.get(p, 0)}</b>\n"
    return stats

def _build_referral_text(ref_count: int, level: int, to_next: str) -> str:
    level_names = {
        0: "–ù–µ—Ç —É—Ä–æ–≤–Ω—è",
        1: "1",
        2: "2 (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç)",
        3: "3 (VIP)",
        4: "4 (–±–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞)"
    }
    return (
        f"\n<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>"
        f"\n<b>–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:</b> {level_names[level]}"
        f"\n<b>–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {ref_count}"
        f"\n{to_next}\n"
    )


@router.callback_query(lambda c: c.data == "myprofile")
async def show_profile(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–Ω–æ–ø–∫–∞ myprofile)."""
    user_id = callback.from_user.id
    name = callback.from_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    username = callback.from_user.username or ""
    logger.debug("–û—Ç–∫—Ä—ã—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º user_id=%d", user_id)

    async with get_session() as session:
        expire_at = await get_subscriber_expiry(session, user_id)
        total = await get_total_downloads(session, user_id)
        today = await get_daily_downloads(session, user_id)
        platform_stats = await get_platform_counts(session, user_id)
        # --- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ---
        ref_count, level, _ = await get_referral_stats(session, user_id)
        next_level = {0: 1, 1: 3, 2: 10, 3: 30, 4: None}[level]
        to_next = f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {next_level - ref_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤" if next_level else "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!"

    left = max(0, 20 - today)
    status = _format_subscription_status(expire_at)
    text = _build_profile_text(user_id, name, username, status, total, today, left, platform_stats)
    text += _build_referral_text(ref_count, level, to_next)

    current = (callback.message.text or "").strip()
    if current == text.strip():
        await callback.answer()
        logger.debug("–ü—Ä–æ—Ñ–∏–ª—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (user_id=%d)", user_id)
        return

    try:
        await callback.message.edit_text(
            text, parse_mode="HTML", reply_markup=_build_profile_keyboard()
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            await callback.answer()
            logger.debug(
                "–ü–æ–¥–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ 'message is not modified' (user_id=%d)", user_id
            )
            return
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å user_id=%d", user_id)
        raise

    await callback.answer()
    logger.info("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞–∑–∞–Ω user_id=%d", user_id)

"""–ü–æ–¥–¥–µ—Ä–∂–∫–∞ (–∞–¥–º–∏–Ω): –æ—Ç–≤–µ—Ç—ã –≤ —Ç–µ–º–∞—Ö –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–æ–≤."""

import logging
from typing import Optional

from aiogram import F, Router
from aiogram.types import Message

from config import SUPPORT_GROUP_ID
from db.base import get_session
from db.support import SupportTicket, close_ticket, get_open_ticket_by_topic_id


logger = logging.getLogger(__name__)

router = Router()
router.message.filter(F.chat.id == SUPPORT_GROUP_ID, F.is_topic_message)
router.callback_query.filter(F.chat.id == SUPPORT_GROUP_ID, F.is_topic_message)

@router.message(F.text.lower().in_(["/stop", "—Å—Ç–æ–ø", "–∑–∞–∫—Ä—ã—Ç—å"]))
async def admin_close_ticket_handler(event) -> None:
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞.
    """
    if isinstance(event, Message):
        topic_id = event.message_thread_id
        admin_id = event.from_user.id
    else:
        topic_id = event.message.message_thread_id
        admin_id = event.from_user.id

    async with get_session() as session:
        ticket: Optional[SupportTicket] = await get_open_ticket_by_topic_id(
            session, topic_id
        )

        if not ticket:
            if isinstance(event, Message):
                await event.reply("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
            else:
                await event.message.edit_text("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
                await event.answer()
            return

        user_id = ticket.user_id
        await close_ticket(session, user_id)

        await event.bot.send_message(
            user_id, "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥. –í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
        )

        if isinstance(event, Message):
            await event.reply("‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–∫—Ä—ã—Ç.")
        else:
            await event.message.edit_text("‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–∫—Ä—ã—Ç.")
            await event.answer()
        logger.info(
            "‚úÖ [SUPPORT] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d (—Ç–µ–º–∞ %d)",
            admin_id,
            user_id,
            topic_id,
        )

@router.message()
async def admin_reply_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ç–µ–º–∞—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Ç–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç.
    """
    if message.from_user.is_bot:
        return

    topic_id = message.message_thread_id
    admin_id = message.from_user.id

    async with get_session() as session:
        ticket: Optional[SupportTicket] = await get_open_ticket_by_topic_id(
            session, topic_id
        )

        if not ticket:
            await message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
            return

        user_id = ticket.user_id
        try:
            await message.copy_to(
                chat_id=user_id, caption=f"üí¨ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{message.caption or ''}"
            )
        except Exception as e:
            logger.error(
                "‚ùå [SUPPORT] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %s",
                admin_id,
                user_id,
                e,
            )
            await message.reply(f"‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –û—à–∏–±–∫–∞: {e}")

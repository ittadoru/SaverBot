from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import Command
from utils.redis import r as redis
from config import SUPPORT_GROUP_ID
from states.support import Support
from utils.support_ticket import create_ticket, get_ticket, close_ticket, is_ticket_open
from utils import logger as log
router = Router()

@router.message(Command("help"))
async def start_support(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    ticket = await get_ticket(redis, user_id)
    if ticket and ticket["status"] == "open":
        await message.answer("–£ –≤–∞—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç —á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        topic_id = await create_ticket(redis, message.bot, user_id, username, SUPPORT_GROUP_ID)
        log.log_message(f"üÜï –û—Ç–∫—Ä—ã—Ç —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è @{username or '–ë–µ–∑ username'} | id={user_id}", emoji="üí¨")

        await message.answer(
            "üÜò –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–∫—Ä—ã—Ç!\n"
            "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /stop.\n"
            "–ü–æ–∫–∞ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç, –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã."
        )
        await message.bot.send_message(
            SUPPORT_GROUP_ID,
            f"üë§ –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç: @{username or '–ë–µ–∑ username'} | {user_id}\n–î–∏–∞–ª–æ–≥ –æ—Ç–∫—Ä—ã—Ç.",
            message_thread_id=topic_id
        )
    await state.set_state(Support.waiting_for_message)

@router.message(Command("stop"), Support.waiting_for_message)
async def stop_support(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    ticket = await get_ticket(redis, user_id)
    if ticket and ticket["status"] == "open":
        await close_ticket(redis, user_id)
        log.log_message(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or '–ë–µ–∑ username'} | id={user_id} –∑–∞–∫—Ä—ã–ª —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏", emoji="üîí")
        await message.answer("–î–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω. –ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
        await message.bot.send_message(
            SUPPORT_GROUP_ID,
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.",
            message_thread_id=ticket["topic_id"]
        )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
    await state.clear()

@router.message(Support.waiting_for_message)
async def forward_to_support(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    ticket = await get_ticket(redis, user_id)
    if not ticket or ticket["status"] != "open":
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return
    topic_id = ticket["topic_id"]
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if message.text:
        await message.bot.send_message(
            SUPPORT_GROUP_ID,
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username or '–ë–µ–∑ username'} | {user_id}:\n{message.text}",
            message_thread_id=topic_id
        )
    if message.photo:
        await message.bot.send_photo(
            SUPPORT_GROUP_ID,
            message.photo[-1].file_id,
            caption=f"–§–æ—Ç–æ –æ—Ç @{username or '–ë–µ–∑ username'} | {user_id}:\n{message.caption or ''}",
            message_thread_id=topic_id
        )
    log.log_message(f"‚úâÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or '–ë–µ–∑ username'} | id={user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {message.text or '[–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'}", emoji="üì©")

import logging
from aiogram.fsm.context import FSMContext
from aiogram import types

from services.youtube import YTDLPDownloader
from services import get_downloader
from utils.download_files.video_utils import get_video_resolution
from utils.download_files.send import send_video, send_audio
from db.base import get_session
from db.subscribers import is_subscriber
from db.downloads import add_download_link, get_daily_downloads, increment_daily_download, get_or_create_total_download
from db.users import log_user_activity, add_or_update_user
from db.channels import is_channel_guard_enabled, get_required_active_channels
from db.platforms import increment_platform_download
from handlers.user.referral import get_referral_stats
from config import DAILY_DOWNLOAD_LIMITS, SUBSCRIBER_DAILY_LIMIT
from utils.get_file_max_mb import get_max_filesize_mb

logger = logging.getLogger(__name__)
BUSY_KEY = "busy"


# ---------------- Busy-state ----------------
async def is_busy(state: FSMContext) -> bool:
    data = await state.get_data()
    return data.get(BUSY_KEY, False)


async def set_busy(state: FSMContext, value: bool):
    await state.update_data({BUSY_KEY: value})


# ---------------- –õ–∏–º–∏—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ ----------------
async def check_download_permissions(user_id: int):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã, –ø–æ–¥–ø–∏—Å–∫–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (bool, message).
    """
    async with get_session() as session:
        daily = await get_daily_downloads(session, user_id)
        sub = await is_subscriber(session, user_id)
        _, level, is_vip = await get_referral_stats(session, user_id)
        guard_on = await is_channel_guard_enabled(session)
        required_channels = await get_required_active_channels(session) if guard_on and not is_vip else []

    if sub:
        limit = SUBSCRIBER_DAILY_LIMIT
    else:
        limit = DAILY_DOWNLOAD_LIMITS.get(level)

    if limit is not None and daily >= limit:
        return False, f"‚ö†Ô∏è –õ–∏–º–∏—Ç {limit} —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤ –¥–µ–Ω—å."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
    if required_channels:
        # —Ç—É—Ç –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–∞ message, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º —Ç–µ–∫—Å—Ç
        lines = ["<b>–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:</b>\n"]
        for ch in required_channels:
            lines.append(f"üëâ <a href='https://t.me/{ch.username}'>@{ch.username}</a>")
        lines.append("\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑.")
        return False, "\n".join(lines)

    return True, ""

# ---------------- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ----------------
async def process_youtube_or_other(
    message: types.Message,
    url: str,
    user_id: int,
    platform: str,
    state: FSMContext,
    mode: str | int = None,
):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if platform == "youtube":
            downloader = YTDLPDownloader()
            async with get_session() as session:
                _, level, _ = await get_referral_stats(session, user_id)
                sub = await is_subscriber(session, user_id)

            max_filesize_mb = await get_max_filesize_mb(level, sub)

            if mode == "audio":
                file_path = await downloader.download_audio(url)
                if not file_path:
                    logger.warning("[DOWNLOAD] downloader returned empty result for audio: %s", url)
                    return await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥.")
                await send_audio(message.bot, message, message.chat.id, file_path)

            elif mode and str(mode).isdigit():
                result = await downloader.download_by_itag(url, int(mode), message, user_id)
                if isinstance(result, tuple) and result[0] == "DENIED_SIZE":
                    return await message.answer(
                        f"‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {result[1]} –ú–ë. "
                        f"–í–∞—à –ª–∏–º–∏—Ç ‚Äî {max_filesize_mb} –ú–ë."
                    )
                if result is None:
                    logger.warning("[DOWNLOAD] downloader returned None for itag download: %s", url)
                    return await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥.")
                if isinstance(result, tuple):
                    logger.warning("[DOWNLOAD] downloader returned error tuple for itag: %s -> %s", url, result)
                    return await message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {result}")
                file_path = result
                w, h = get_video_resolution(file_path)
                await send_video(message.bot, message, message.chat.id, user_id, file_path, w, h)

            else:
                result = await downloader.download(url, message, user_id)
                if isinstance(result, tuple) and result[0] == "DENIED_SIZE":
                    return await message.answer(
                        f"‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {result[1]} –ú–ë. "
                        f"–í–∞—à –ª–∏–º–∏—Ç ‚Äî {max_filesize_mb} –ú–ë."
                    )
                if result is None:
                    logger.warning("[DOWNLOAD] downloader returned None for download: %s", url)
                    return await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥.")
                if isinstance(result, tuple):
                    logger.warning("[DOWNLOAD] downloader returned error tuple: %s -> %s", url, result)
                    return await message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {result}")
                file_path = result
                w, h = get_video_resolution(file_path)
                await send_video(message.bot, message, message.chat.id, user_id, file_path, w, h)

        else:
            downloader = get_downloader(url)
            result = await downloader.download(url, user_id)
            if result is None:
                logger.warning("[DOWNLOAD] downloader returned None for non-youtube: %s", url)
                return await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥.")
            if isinstance(result, tuple):
                logger.warning("[DOWNLOAD] downloader returned error tuple for non-youtube: %s -> %s", url, result)
                return await message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {result}")
            file_path = result
            w, h = get_video_resolution(file_path)
            await send_video(message.bot, message, message.chat.id, user_id, file_path, w, h)

        # –ª–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        async with get_session() as session:
            await add_or_update_user(
                session,
                user_id,
                getattr(message.from_user, "first_name", None),
                getattr(message.from_user, "username", None),
            )
            await log_user_activity(session, user_id)
            await increment_daily_download(session, user_id)
            total_row = await get_or_create_total_download(session, user_id)
            total_row.total += 1
            await add_download_link(session, user_id, url)
            await increment_platform_download(session, user_id, platform)
            await session.commit()

    except Exception as e:
        logger.error(f"‚ùå [DOWNLOAD] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}", exc_info=True)
        await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await set_busy(state, False)

"""–ü–ª–∞—Ç–µ–∂–∏ YooKassa: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ webhook-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

from __future__ import annotations

import logging
import uuid
from typing import NamedTuple, Optional, Dict

from yookassa import Configuration, Payment
from yookassa.domain.notification import WebhookNotification

from config import SHOP_ID, API_KEY

logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
CURRENCY = "RUB"
EMAIL_DOMAIN_FALLBACK = "example.local"  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —á–µ–∫–æ–≤ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç—å)
MAX_DESCRIPTION_LEN = 128  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ (YooKassa –¥–æ–ø—É—Å–∫–∞–µ—Ç –±–æ–ª—å—à–µ, –Ω–æ –¥–µ—Ä–∂–∏–º –∫–æ—Ä–æ—á–µ)


class PaymentResult(NamedTuple):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ ID –ø–ª–∞—Ç–µ–∂–∞."""
    url: str
    payment_id: str


def _ensure_configuration() -> None:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é SDK (–∫–æ–Ω—Ç—Ä–∞–∫—Ç: SHOP_ID/API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã)."""
    if not SHOP_ID or not API_KEY:
        raise RuntimeError("YooKassa credentials (SHOP_ID/API_KEY) –Ω–µ –∑–∞–¥–∞–Ω—ã")
    Configuration.account_id = SHOP_ID
    Configuration.secret_key = API_KEY


def _gen_idempotence_key() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π idempotence key (UUID4)."""
    return str(uuid.uuid4())


def create_payment(
    user_id: int,
    amount: int,
    description: str,
    bot_username: str,
    metadata: Optional[Dict[str, str]] = None,
    capture: bool = True,
) -> PaymentResult:
    """–°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂ YooKassa.

    Contract:
      inputs: user_id>0, amount>0 (–≤ —Ä—É–±–ª—è—Ö), –Ω–µ–ø—É—Å—Ç–æ–π description (—É—Å–µ–∫–∞–µ—Ç—Å—è –¥–æ 128), bot_username –±–µ–∑ '@'
      returns: PaymentResult(url, payment_id)
      raises: ValueError (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã), RuntimeError (–Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏), –∏—Å–∫–ª—é—á–µ–Ω–∏—è SDK/—Å–µ—Ç–∏ (–ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è)
      guarantees: currency=RUB, —Å—É–º–º–∞ —Å 2 –∑–Ω–∞–∫–∞–º–∏, –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã–∑–æ–≤–∞ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á)
    """
    if user_id <= 0:
        raise ValueError("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0")
    if amount <= 0:
        raise ValueError("amount –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0")
    if not description or not description.strip():
        raise ValueError("description –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    desc = description.strip()
    if len(desc) > MAX_DESCRIPTION_LEN:
        logger.debug("‚úÇÔ∏è [PAYMENT] –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —É—Å–µ—á–µ–Ω–æ —Å %d –¥–æ %d", len(desc), MAX_DESCRIPTION_LEN)
        desc = desc[:MAX_DESCRIPTION_LEN]

    bot_name = bot_username.lstrip('@') if bot_username else "bot"
    value_str = f"{amount:.2f}"

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: –∫–æ–ø–∏—è + –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    meta: Dict[str, str] = dict(metadata) if metadata else {}
    meta.setdefault("user_id", str(user_id))

    _ensure_configuration()
    idempotence_key = _gen_idempotence_key()

    receipt_data = {
        "customer": {
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π email-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —á–µ–∫–∞.
            "email": f"user_{user_id}@{EMAIL_DOMAIN_FALLBACK}"
        },
        "items": [
            {
                "description": desc,
                "quantity": "1.00",
                "amount": {"value": value_str, "currency": CURRENCY},
                "vat_code": "1",  # –ù–î–° –Ω–µ –æ–±–ª–∞–≥–∞–µ—Ç—Å—è (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
                "payment_mode": "full_prepayment",
                "payment_subject": "service",
            }
        ],
    }

    payload = {
        "amount": {"value": value_str, "currency": CURRENCY},
        "confirmation": {
            "type": "redirect",
            "return_url": f"https://t.me/{bot_name}",
        },
        "capture": capture,
        "description": desc,
        "metadata": meta,
        "receipt": receipt_data,
    }

    payment = Payment.create(payload, idempotence_key)

    logger.info(
        "üí∏ [PAYMENT] –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: id=%s user=%s amount=%s capture=%s",
        payment.id, user_id, value_str, capture
    )
    return PaymentResult(payment.confirmation.confirmation_url, payment.id)


def parse_webhook_notification(request_body: dict) -> WebhookNotification | None:
    """–ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å webhook YooKassa; –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None."""
    try:
        notification_object = WebhookNotification(request_body)
        return notification_object
    except Exception:  # noqa: BLE001
        logger.debug("‚ö†Ô∏è [WEBHOOK] –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ webhook-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: %s", request_body)
        return None

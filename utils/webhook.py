"""Webhook YooKassa: –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è, –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ–≥ –∞–¥–º–∏–Ω–∞–º."""

from __future__ import annotations

import logging
from datetime import datetime
from typing import Optional

from aiohttp import web
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey

from utils import payment
from db.base import get_session
from db.subscribers import add_subscriber_with_duration, get_subscriber_expiry
from db.tariff import get_tariff_by_id, Tariff  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ Tariff –¥–æ—Å—Ç—É–ø–µ–Ω
from utils import logger as log  # —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –æ–±–µ—Ä—Ç–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

logger = logging.getLogger(__name__)

EVENT_SUCCESS = "payment.succeeded"


async def _handle_user_payment(user_id: int, tariff: Tariff) -> Optional[datetime]:
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (UTC) –∏–ª–∏ None –ø—Ä–∏ —Å–±–æ–µ."""
    days = tariff.duration_days
    async with get_session() as session:
        await add_subscriber_with_duration(session, user_id, days)
        return await get_subscriber_expiry(session, user_id)


async def _notify_user_and_show_keys(user_id: int, bot: Bot, request: web.Request, expiry: Optional[datetime]):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—á–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ; —Å–æ–æ–±—â–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."""
    try:
        dp = request.app['dp']  # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        storage = dp.storage
        storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)
        state = FSMContext(storage=storage, key=storage_key)

        fsm_data = await state.get_data()
        payment_message_id = fsm_data.get("payment_message_id")

        expiry_text = ""
        if expiry:
            # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏; –∑–¥–µ—Å—å ISO‚Äë–¥–∞—Ç–∞
            expiry_text = f"\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: <b>{expiry.astimezone().strftime('%Y-%m-%d %H:%M')}</b>"

        if payment_message_id:
            await bot.edit_message_text(
                chat_id=user_id,
                message_id=payment_message_id,
                text=f"‚úÖ <i>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞.</i>{expiry_text}",
                reply_markup=None,
                parse_mode="HTML",
            )

        await state.clear()

    except Exception:  # –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å stack
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/–æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ user_id=%s", user_id)

async def _log_transaction(bot: Bot, user_id: int, tariff_name: str, tariff_price: float, support_chat_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –ª–æ–≥ –æ–± –æ–ø–ª–∞—Ç–µ."""
    try:
        text = (
            f"üí≥ –û–ø–ª–∞—Ç–∞\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}</a>\n"
            f"üí≥ –¢–∞—Ä–∏—Ñ: ¬´{tariff_name}¬ª\n"
            f"üí∞ –°—É–º–º–∞: {tariff_price} RUB"
        )

        await bot.send_message(
            chat_id=support_chat_id,
            text=text
        )

        log.log_message(f"–õ–æ–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.", emoji="‚úÖ", log_level="info")

    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ user_id=%s", user_id)


async def yookassa_webhook_handler(request: web.Request) -> web.Response:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ YooKassa (—É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ -> –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏)."""
    logger.info("WEBHOOK: start")
    try:
        body = await request.json()
    except Exception:
        logger.warning("WEBHOOK: invalid JSON")
        return web.Response(status=400)

    notification = payment.parse_webhook_notification(body)
    if not notification:
        logger.warning("WEBHOOK: parse failed")
        return web.Response(status=400)
    if notification.event != EVENT_SUCCESS:
        logger.info("WEBHOOK: unsupported event %s", notification.event)
        return web.Response(status=400)

    # --- –í–∞–ª–∏–¥–∞—Ü–∏—è metadata ---
    meta = getattr(notification.object, 'metadata', None) or {}
    if not all(k in meta for k in ("user_id", "tariff_id")):
        logger.warning("WEBHOOK: missing metadata keys")
        return web.Response(status=400)
    try:
        user_id = int(meta["user_id"])
        tariff_id = int(meta["tariff_id"])
    except (ValueError, TypeError):
        logger.warning("WEBHOOK: invalid metadata values %s", meta)
        return web.Response(status=400)

    # --- –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ ---
    async with get_session() as session:
        tariff = await get_tariff_by_id(session, tariff_id)
    if not tariff:
        logger.warning("WEBHOOK: tariff not found id=%s", tariff_id)
        return web.Response(status=400)

    logger.info("WEBHOOK: success payment user_id=%s tariff=%s", user_id, tariff_id)

    bot: Bot = request.app['bot']
    support_chat_id = request.app['config'].tg_bot.support_chat_id

    expiry = await _handle_user_payment(user_id, tariff)
    await _log_transaction(bot, user_id, tariff.name, tariff.price, support_chat_id)
    await _notify_user_and_show_keys(user_id, bot, request, expiry)

    logger.info("WEBHOOK: completed user_id=%s tariff=%s", user_id, tariff_id)
    return web.Response(status=200)

    # NOTE: –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö webhook –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ (—Å–º. TODO –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏)
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ payment_id –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è.
    # (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤–Ω–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

    # --- –û—à–∏–±–∫–∏ ---
    # –û–±—â–∏–π –ø–µ—Ä–µ—Ö–≤–∞—Ç –≤—ã–Ω–µ—Å–µ–Ω –≤—ã—à–µ; –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ except –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è

from aiohttp import web
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
import payment
from redis_db.subscribers import add_subscriber_with_duration
from redis_db.tariff import get_tariff_by_id
from utils import logger as log  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

async def _handle_user_payment(user_id: int, tariff):
    """
    –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis.
    """
    subscription_days = tariff.duration_days
    await add_subscriber_with_duration(user_id, subscription_days)
    log.log_message(
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {subscription_days} –¥–Ω–µ–π.",
        emoji="üîÑ", log_level="info"
    )


async def _notify_user_and_show_keys(user_id: int, tariff, bot: Bot, request: web.Request):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∏ –æ—á–∏—â–∞–µ—Ç FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    try:
        dp = request.app['dp']  # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        storage = dp.storage
        storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)
        state = FSMContext(storage=storage, key=storage_key)

        fsm_data = await state.get_data()
        payment_message_id = fsm_data.get("payment_message_id")

        if payment_message_id:
            await bot.edit_message_text(
                chat_id=user_id,
                message_id=payment_message_id,
                text="‚úÖ <i>–≠—Ç–æ—Ç —Å—á–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω.</i>",
                reply_markup=None
            )

        await state.clear()

    except Exception as e:
        log.log_message(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}",
            emoji="‚ùå", log_level="error"
        )

async def _log_transaction(bot: Bot, user_id: int, tariff_name: str, tariff_price: float, support_chat_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ª–æ–≥ –æ —Å–æ–≤–µ—Ä—à—ë–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–µ.
    """
    try:
        text = (
            f"üí≥ –û–ø–ª–∞—Ç–∞\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}</a>\n"
            f"üí≥ –¢–∞—Ä–∏—Ñ: ¬´{tariff_name}¬ª\n"
            f"üí∞ –°—É–º–º–∞: {tariff_price} RUB"
        )

        await bot.send_message(
            chat_id=support_chat_id,
            text=text
        )

        log.log_message(f"–õ–æ–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.", emoji="‚úÖ", log_level="info")

    except Exception as e:
        log.log_message(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}",
            emoji="‚ùå", log_level="error"
        )


async def yookassa_webhook_handler(request: web.Request):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç YooKassa.
    """
    try:
        request_body = await request.json()
        notification = payment.parse_webhook_notification(request_body)

        if notification is None or notification.event != 'payment.succeeded':
            log.log_message("–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã–π webhook –æ—Ç YooKassa.", emoji="‚ö†Ô∏è", log_level="warning")
            return web.Response(status=400)

        metadata = notification.object.metadata
        user_id = int(metadata['user_id'])
        tariff_id = int(metadata['tariff_id'])
        tariff = await get_tariff_by_id(tariff_id)
        log.log_message(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —Ç–∞—Ä–∏—Ñ–æ–º {tariff_id}.", emoji="üîî", log_level="error")
        if not tariff:
            log.log_message(f"Webhook —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º tariff_id: {tariff_id}", emoji="‚ö†Ô∏è", log_level="warning")
            return web.Response(status=400)

        log.log_message(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∞—Ä–∏—Ñ '{tariff.name}'.", emoji="üí≥", log_level="info")

        bot: Bot = request.app['bot']
        support_chat_id = request.app['config'].tg_bot.support_chat_id

        await _handle_user_payment(user_id, tariff)
        await _log_transaction(bot, user_id, tariff.name, tariff.price, support_chat_id)
        await _notify_user_and_show_keys(user_id, tariff, bot, request)

        return web.Response(status=200)

    except Exception as e:
        log.log_message(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}", emoji="‚ùå", log_level="error")
        return web.Response(status=500)

from .base import BaseDownloader
import yt_dlp
import os
import uuid
from config import DOWNLOAD_DIR, ADMIN_ERROR
from utils import yt_dlp_logger as yt, logger as log


class InstagramDownloader(BaseDownloader):
    async def download(self, url: str, message) -> str:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Å Instagram —Å –ø–æ–º–æ—â—å—é yt-dlp.
        """
        filename = os.path.join(DOWNLOAD_DIR, f"{uuid.uuid4()}.mp4")
        log.log_download_start(url)  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏

        ydl_opts = {
            'format': 'mp4',
            'outtmpl': filename,
            'merge_output_format': 'mp4',
            'quiet': False,
            'logger': yt.YTDlpLoggerAdapter(),
            'retries': 10,
            'fragment_retries': 10,
            'socket_timeout': 30,
            'http_chunk_size': 1024 * 1024,
            'nocheckcertificate': True,
            'tls_verify': False,
        }

        import asyncio
        import time

        loop = asyncio.get_running_loop()

        def run_download_with_retries():
            max_attempts = 3
            username = None
            if hasattr(message, 'from_user') and hasattr(message.from_user, 'username'):
                username = message.from_user.username
            elif hasattr(message, 'username'):
                username = message.username
            elif isinstance(message, int):
                username = f'user_id={message}'
            for attempt in range(1, max_attempts + 1):
                try:
                    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                        ydl.download([url])
                    return  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
                except yt_dlp.utils.DownloadError as e:
                    err_str = str(e)
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ age-restricted/18+ –≤–∏–¥–µ–æ
                    if any(x in err_str.lower() for x in ["18 years old", "age-restricted", "login required", "restricted video"]):
                        log.log_message(f"[AGE-RESTRICTED] –í–∏–¥–µ–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º: {url} (user: {username})", log_level="warning")
                        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                        if hasattr(message, 'answer'):
                            import asyncio
                            asyncio.run(message.answer("üö´ –≠—Ç–æ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –∏–º–µ–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Instagram."))
                        return "AGE_RESTRICTED"
                    log.log_error(f"‚ùå –û—à–∏–±–∫–∞ yt-dlp (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}): {e}", username)
                except Exception as e:
                    log.log_error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}): {e}", username)

                if attempt < max_attempts:
                    time.sleep(5)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                else:
                    raise Exception("üö´ –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å")

        result = await loop.run_in_executor(None, run_download_with_retries)
        if result == "AGE_RESTRICTED":
            return None
        # –û—à–∏–±–∫–∏
        log.log_download_complete(filename)  # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        return filename

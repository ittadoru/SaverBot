"""YouTube downloader —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.

–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Ä–∞–Ω–µ–µ –ø—Ä–æ—Ü–µ–Ω—Ç "–∑–∞—Å—Ç—Ä–µ–≤–∞–ª" (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ ~33%), –ø–æ—Ç–æ–º—É —á—Ç–æ —É—á–∏—Ç—ã–≤–∞–ª—Å—è
—Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª (video –∏–ª–∏ audio). –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ—Ö
—Å–∫–∞—á–∏–≤–∞–µ–º—ã—Ö —á–∞—Å—Ç–µ–π (video + audio) –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç.
"""

from __future__ import annotations

import os
import uuid
import asyncio
from pytubefix import YouTube

from utils.logger import get_logger
from db.subscribers import is_subscriber as db_is_subscriber
from db.base import get_session
from .base import BaseDownloader
from config import DOWNLOAD_DIR, DOWNLOAD_FILE_LIMIT


logger = get_logger(__name__, platform="youtube")

class YTDLPDownloader(BaseDownloader):
    async def download_by_itag(self, url: str, itag: int, message, user_id: int | None = None) -> str | tuple[str, str]:
        logger.info("‚¨áÔ∏è [DOWNLOAD] –ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ itag=%s, url=%s", itag, url)
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É itag (mux –µ—Å–ª–∏ –Ω—É–∂–Ω–æ).
        """
        filename = os.path.join(DOWNLOAD_DIR, f"{uuid.uuid4()}.mp4")
        loop = asyncio.get_running_loop()
        yt = YouTube(url)
        stream = yt.streams.get_by_itag(itag)
        if not stream:
            raise Exception(f"No stream found for itag={itag}")
        # –ï—Å–ª–∏ progressive ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∞—á–∏–≤–∞–µ–º
        if stream.is_progressive:
            def run_download():
                stream.download(output_path=DOWNLOAD_DIR, filename=os.path.basename(filename))
            try:
                await loop.run_in_executor(None, run_download)
            except Exception as e:
                logger.error("‚ùå [DOWNLOAD] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–≥—É: %s", str(e))

            logger.info("‚úÖ [DOWNLOAD] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: —Ñ–∞–π–ª=%s", filename)
            return filename
        # –ï—Å–ª–∏ –Ω–µ progressive ‚Äî mux video+audio
        else:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            video_path = os.path.join(DOWNLOAD_DIR, f"{uuid.uuid4()}_video.mp4")
            def run_download_video():
                stream.download(output_path=DOWNLOAD_DIR, filename=os.path.basename(video_path))
            await loop.run_in_executor(None, run_download_video)
            # –°–∫–∞—á–∏–≤–∞–µ–º –ª—É—á—à–∏–π –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫
            audio_stream = yt.streams.filter(only_audio=True, file_extension='mp4').order_by('abr').desc().first()
            if not audio_stream:
                raise Exception("No audio/mp4 stream found for mux")
            audio_path = os.path.join(DOWNLOAD_DIR, f"{uuid.uuid4()}_audio.m4a")
            def run_download_audio():
                audio_stream.download(output_path=DOWNLOAD_DIR, filename=os.path.basename(audio_path))
            await loop.run_in_executor(None, run_download_audio)
            # Mux video+audio —á–µ—Ä–µ–∑ ffmpeg
            import subprocess
            cmd = [
                "ffmpeg", "-y",
                "-i", video_path,
                "-i", audio_path,
                "-c:v", "copy",
                "-c:a", "copy",
                filename
            ]

            logger.info(f"üéõÔ∏è [MUX] ffmpeg –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è")
            proc = await asyncio.create_subprocess_exec(*cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
            stdout, stderr = await proc.communicate()
            if proc.returncode != 0:
                logger.error(f"‚ùå [MUX] –û—à–∏–±–∫–∞ ffmpeg mux: {stderr.decode()}")
                raise Exception(f"ffmpeg mux error: {stderr.decode()}")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                await asyncio.to_thread(os.remove, video_path)
                await asyncio.to_thread(os.remove, audio_path)
            except Exception:
                pass
            logger.info("‚úÖ [DOWNLOAD] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: —Ñ–∞–π–ª=%s", filename)
            return filename

    async def get_available_video_options(self, url: str) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç title, thumbnail_url –∏ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤ mp4 (240-1080p, –Ω–µ webm, –Ω–µ –≤—ã—à–µ –ª–∏–º–∏—Ç–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É).
        –ö–∞–∂–¥—ã–π —Ñ–æ—Ä–º–∞—Ç: {'itag', 'res', 'progressive', 'filesize', 'mime_type'}
        """
        loop = asyncio.get_running_loop()
        def fetch():
            yt = YouTube(url)
            title = yt.title
            thumbnail_url = yt.thumbnail_url
            formats = []
            for s in yt.streams:
                # –¢–æ–ª—å–∫–æ mp4, —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ, —Ç–æ–ª—å–∫–æ 240-1080p, –Ω–µ webm
                if s.mime_type and s.mime_type.startswith('video/mp4') and s.resolution:
                    try:
                        res = int(s.resolution.replace('p',''))
                    except Exception:
                        continue
                    if 240 <= res <= 1080:
                        size_mb = s.filesize / 1024 / 1024 if s.filesize else 0
                        formats.append({
                            'itag': s.itag,
                            'res': s.resolution,
                            'progressive': s.is_progressive,
                            'filesize': s.filesize,
                            'mime_type': s.mime_type,
                            'size_mb': round(size_mb, 1)
                        })
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
            formats.sort(key=lambda x: int(x['res'].replace('p','')))
            return {
                'title': title,
                'thumbnail_url': thumbnail_url,
                'formats': formats
            }
        return await loop.run_in_executor(None, fetch)
    

    async def download(self, url: str, message, user_id: int | None = None) -> str | tuple[str, str]:
        logger.info("‚¨áÔ∏è [DOWNLOAD] –ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª—É—á—à–µ–≥–æ mp4, url=%s", url)
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ª—É—á—à–µ–≥–æ mp4 (progressive, —Å–æ –∑–≤—É–∫–æ–º) —á–µ—Ä–µ–∑ pytubefix.
        """
        filename = os.path.join(DOWNLOAD_DIR, f"{uuid.uuid4()}.mp4")
        loop = asyncio.get_running_loop()

        yt = YouTube(url)

        # –õ—É—á—à–∏–π mp4 progressive (—Å–æ –∑–≤—É–∫–æ–º) —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º 360p/480p
        stream = None
        for res in ["480p", "360p"]:
            stream = yt.streams.filter(progressive=True, file_extension='mp4', resolution=res).first()
            if stream:
                break
        if not stream:
            # –ï—Å–ª–∏ –Ω–µ—Ç 360p/480p, –±–µ—Ä—ë–º –ª—é–±–æ–π progressive mp4
            stream = yt.streams.filter(progressive=True, file_extension='mp4').order_by('resolution').desc().first()

        if stream:
            filesize_bytes = stream.filesize
            filesize_mb = filesize_bytes / (1024 * 1024) if filesize_bytes else 0

            is_sub = False
            if user_id is not None and isinstance(user_id, int):
                async with get_session() as session:
                    is_sub = await db_is_subscriber(session, user_id)
            if not is_sub and filesize_mb > DOWNLOAD_FILE_LIMIT:
                return ("DENIED_SIZE", f"{filesize_mb:.1f}")

            def run_download():
                stream.download(output_path=DOWNLOAD_DIR, filename=os.path.basename(filename))

            try:
                await loop.run_in_executor(None, run_download)
            except Exception as e:
                err = str(e)
                logger.error("‚ùå [DOWNLOAD] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: %s", err)

            logger.info("‚úÖ [DOWNLOAD] –ì–æ—Ç–æ–≤–æ: —Ñ–∞–π–ª=%s", filename)
            return filename
        else:
            # –ù–µ—Ç progressive mp4 ‚Äî fallback: –∏—â–µ–º –ª—É—á—à–∏–π video/mp4 –∏ audio/mp4, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
            video_stream = None
            for res in ["480p", "360p", "720p"]:
                video_stream = yt.streams.filter(progressive=False, file_extension='mp4', type='video', resolution=res).first()
                if video_stream:
                    break
            if not video_stream:
                video_stream = yt.streams.filter(progressive=False, file_extension='mp4', type='video').order_by('resolution').desc().first()

            audio_stream = yt.streams.filter(only_audio=True, file_extension='mp4').order_by('abr').desc().first()
            if not video_stream or not audio_stream:
                raise Exception("No suitable video/audio mp4 streams found for mux")
            video_path = os.path.join(DOWNLOAD_DIR, f"{uuid.uuid4()}_video.mp4")
            audio_path = os.path.join(DOWNLOAD_DIR, f"{uuid.uuid4()}_audio.m4a")
            def run_download_video():
                video_stream.download(output_path=DOWNLOAD_DIR, filename=os.path.basename(video_path))
            def run_download_audio():
                audio_stream.download(output_path=DOWNLOAD_DIR, filename=os.path.basename(audio_path))
            await loop.run_in_executor(None, run_download_video)
            await loop.run_in_executor(None, run_download_audio)
            # Mux video+audio —á–µ—Ä–µ–∑ ffmpeg
            cmd = [
                "ffmpeg", "-y",
                "-i", video_path,
                "-i", audio_path,
                "-c:v", "copy",
                "-c:a", "copy",
                filename
            ]
            proc = await asyncio.create_subprocess_exec(*cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
            stdout, stderr = await proc.communicate()
            if proc.returncode != 0:
                logger.error(f"‚ùå [MUX] –û—à–∏–±–∫–∞ ffmpeg mux: {stderr.decode()}")
                raise Exception(f"ffmpeg mux error: {stderr.decode()}")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                os.remove(video_path)
                os.remove(audio_path)
            except Exception:
                pass
            logger.info("‚úÖ [MUX] MUX –∑–∞–≤–µ—Ä—à—ë–Ω: —Ñ–∞–π–ª=%s", filename)
            return filename

    async def download_audio(self, url: str) -> str:
        logger.info("‚¨áÔ∏è [AUDIO] –ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ, url=%s", url)
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –ª—É—á—à–∏–π –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ (m4a/mp4) —á–µ—Ä–µ–∑ pytubefix, –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ mp3.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É m4a-—Ñ–∞–π–ª—É.
        """
        filename = os.path.join(DOWNLOAD_DIR, f"{uuid.uuid4()}.m4a")
        loop = asyncio.get_running_loop()
        def run_download():
            yt = YouTube(url)
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –≤ mp4/m4a
            stream = yt.streams.filter(only_audio=True, file_extension='mp4').order_by('abr').desc().first()
            if not stream:
                raise Exception("No audio/mp4 stream found")
            stream.download(output_path=DOWNLOAD_DIR, filename=os.path.basename(filename))
        try:
            await loop.run_in_executor(None, run_download)
        except Exception as e:
            logger.error("‚ùå [AUDIO] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ: %s", str(e))

        logger.info("‚úÖ [AUDIO] –ì–æ—Ç–æ–≤–æ: —Ñ–∞–π–ª=%s", filename)
        return filename
    